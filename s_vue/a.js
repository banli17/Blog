let a = { "success": false, "current": 1, "pageSize": 999, "total": 1, "data": [{ "day_id": 235, "publish_date": "2021-04-07", "name": "相交链表", "content": "```\n    题目描述\n        编写一个程序，找到两个单链表相交的起始节点。\n\n \n    示例1：\n        输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3\n        输出：Reference of the node with value = 8\n        输入解释：相交节点的值为 8 （注意，如果两个链表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。\n\n\n    示例2：\n        输入：intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1\n        输出：Reference of the node with value = 2\n        输入解释：相交节点的值为 2 （注意，如果两个链表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。\n\n\n    示例3：\n        输入：intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2\n        输出：null\n        输入解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。\n        解释：这两个链表不相交，因此返回 null。\n\n\n    \n    注意：\n        如果两个链表没有交点，返回 null.\n        在返回结果后，两个链表仍须保持原有的结构。\n        可假定整个链表结构中没有循环。\n\n\n        var getIntersectionNode = function(headA, headB) {\n            //TODO\n        }\n```", "type": "js" }, { "day_id": 234, "publish_date": "2021-04-06", "name": "请问如何进行首页加载优化?", "content": "请问如何进行首页加载优化?", "type": "md" }, { "day_id": 233, "publish_date": "2021-04-05", "name": "什么是跨域?都有哪些方式会造成跨域?", "content": "什么是跨域?都有哪些方式会造成跨域?", "type": "md" }, { "day_id": 232, "publish_date": "2021-04-04", "name": "LRU缓存机制", "content": "```\n题目描述：\n    运用你所掌握的数据结构，设计和实现一个 LRU (最近最少使用) 缓存机制 。\n    实现 LRUCache 类：\n        LRUCache(int capacity) 以正整数作为容量 capacity 初始化 LRU 缓存\n        int get(int key) 如果关键字 key 存在于缓存中，则返回关键字的值，否则返回 -1 。\n        void put(int key, int value) 如果关键字已经存在，则变更其数据值；如果关键字不存在，则插入该组「关键字-值」。当缓存容量达到上限时，它应该在写入新数据之前删除最久未使用的数据值，从而为新的数据值留出空间。\n\n\n示例：\n\n    输入：[\"LRUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n            [[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]\n    输出：[null, null, null, 1, null, -1, null, -1, 3, 4]\n    解释：\n        LRUCache lRUCache = new LRUCache(2);\n        lRUCache.put(1, 1); // 缓存是 {1=1}\n        lRUCache.put(2, 2); // 缓存是 {1=1, 2=2}\n        lRUCache.get(1); // 返回 1\n        lRUCache.put(3, 3); // 该操作会使得关键字 2 作废，缓存是 {1=1, 3=3}\n        lRUCache.get(2); // 返回 -1 (未找到)\n        lRUCache.put(4, 4); // 该操作会使得关键字 1 作废，缓存是 {4=4, 3=3}\n        lRUCache.get(1); // 返回 -1 (未找到)\n        lRUCache.get(3); // 返回 3\n        lRUCache.get(4); // 返回 4\n\nvar Node = function (key = null, val = null, next = null, pre = null) {\n    //TODO\n}\nvar LRUCache = function (capacity = 0) {\n    //TODO\n};\n\n/** \n * @param {number} key\n * @return {number}\n */\nLRUCache.prototype.get = function (key) {\n    //TODO\n};\n\n/** \n * @param {number} key \n * @param {number} value\n * @return {void}\n */\nLRUCache.prototype.put = function (key, value) {\n    //TODO\n};\n```", "type": "js" }, { "day_id": 231, "publish_date": "2021-04-03", "name": "浏览器都有哪些进程，渲染进程中都有什么线程?", "content": "浏览器都有哪些进程，渲染进程中都有什么线程?", "type": "md" }, { "day_id": 229, "publish_date": "2021-04-02", "name": "二叉树的最大深度", "content": "```\n    题目描述：\n        给定一个二叉树，找出其最大深度。\n        二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。\n        说明: 叶子节点是指没有子节点的节点。\n\n    示例：\n        给定二叉树 [3,9,20,null,null,15,7]，\n\n            3\n           / \\\n          9  20\n         /    \\\n        15     7\n        \n        返回它的最大深度 3 。\n    var maxDepth = function(root) {\n        //TODO\n    }\n```", "type": "js" }, { "day_id": 230, "publish_date": "2021-04-01", "name": "说一下 JavaScript 的宿主对象和原生对象的区别?", "content": "说一下 JavaScript 的宿主对象和原生对象的区别?", "type": "md" }, { "day_id": 228, "publish_date": "2021-03-31", "name": "虚拟列表是什么?说一下它的实现原理?", "content": "虚拟列表是什么?说一下它的实现原理?", "type": "md" }, { "day_id": 227, "publish_date": "2021-03-30", "name": "介绍你所理解的装饰器模式?", "content": "介绍你所理解的装饰器模式?", "type": "md" }, { "day_id": 226, "publish_date": "2021-03-29", "name": "说说ES6对Object类型做了哪些优化更新?", "content": "说说ES6对Object类型做了哪些优化更新?", "type": "md" }, { "day_id": 225, "publish_date": "2021-03-28", "name": "Promise.resolve(obj),obj有几种形式", "content": "Promise.resolve(obj),obj有几种形式", "type": "md" }, { "day_id": 224, "publish_date": "2021-03-27", "name": "介绍你所理解的工厂模式?", "content": "介绍你所理解的工厂模式?", "type": "md" }, { "day_id": 223, "publish_date": "2021-03-26", "name": "说说Vue开发如何针对搜索引擎做SEO优化?", "content": "说说Vue开发如何针对搜索引擎做SEO优化?", "type": "md" }, { "day_id": 221, "publish_date": "2021-03-25", "name": "介绍class和ES5的类以及区别", "content": "介绍class和ES5的类以及区别", "type": "md" }, { "day_id": 222, "publish_date": "2021-03-24", "name": "js异步解决方案有哪几种", "content": "js异步解决方案有哪几种", "type": "md" }, { "day_id": 219, "publish_date": "2021-03-23", "name": "手写实现下Object.freeze", "content": "手写实现下Object.freeze", "type": "md" }, { "day_id": 220, "publish_date": "2021-03-22", "name": "Vue-cli默认是单页面的，如果要开发多页面应该怎么办?", "content": "Vue-cli默认是单页面的，如果要开发多页面应该怎么办?", "type": "md" }, { "day_id": 217, "publish_date": "2021-03-21", "name": "设计一个支持增量操作的栈", "content": "```\n题目描述：\n        请你设计一个支持下述操作的栈。\n        实现自定义栈类 CustomStack ：\n        CustomStack(int maxSize)：用 maxSize 初始化对象，maxSize 是栈中最多能容纳的元素数量，栈在增长到 maxSize 之后则不支持 push 操作。\n        void push(int x)：如果栈还未增长到 maxSize ，就将 x 添加到栈顶。\n        int pop()：弹出栈顶元素，并返回栈顶的值，或栈为空时返回 -1 。\n        void inc(int k, int val)：栈底的 k 个元素的值都增加 val 。如果栈中元素总数小于 k ，则栈中的所有元素都增加 val 。\n\n\n    示例：\n        输入：\n        [\"CustomStack\",\"push\",\"push\",\"pop\",\"push\",\"push\",\"push\",\"increment\",\"increment\",\"pop\",\"pop\",\"pop\",\"pop\"]\n        [[3],[1],[2],[],[2],[3],[4],[5,100],[2,100],[],[],[],[]]\n        输出：\n        [null,null,null,2,null,null,null,null,null,103,202,201,-1]\n        解释：\n        CustomStack customStack = new CustomStack(3); // 栈是空的 []\n        customStack.push(1); // 栈变为 [1]\n        customStack.push(2); // 栈变为 [1, 2]\n        customStack.pop(); // 返回 2 --> 返回栈顶值 2，栈变为 [1]\n        customStack.push(2); // 栈变为 [1, 2]\n        customStack.push(3); // 栈变为 [1, 2, 3]\n        customStack.push(4); // 栈仍然是 [1, 2, 3]，不能添加其他元素使栈大小变为 4\n        customStack.increment(5, 100); // 栈变为 [101, 102, 103]\n        customStack.increment(2, 100); // 栈变为 [201, 202, 103]\n        customStack.pop(); // 返回 103 --> 返回栈顶值 103，栈变为 [201, 202]\n        customStack.pop(); // 返回 202 --> 返回栈顶值 202，栈变为 [201]\n        customStack.pop(); // 返回 201 --> 返回栈顶值 201，栈变为 []\n        customStack.pop(); // 返回 -1 --> 栈为空，返回 -1\n\n\n    提示：\n        1 <= maxSize <= 1000\n        1 <= x <= 1000\n        1 <= k <= 1000\n        0 <= val <= 100\n        每种方法 increment，push 以及 pop 分别最多调用 1000 次   \n\n/**\n * @param {number} maxSize\n */\nvar CustomStack = function (maxSize) {\n    //TODO\n};\n\n/** \n * @param {number} x\n * @return {void}\n */\nCustomStack.prototype.push = function (x) {\n    //TODO\n};\n\n/**\n * @return {number}\n */\nCustomStack.prototype.pop = function () {\n    //TODO\n};\n\n/** \n * @param {number} k \n * @param {number} val\n * @return {void}\n */\nCustomStack.prototype.increment = function (k, val) {\n    //TODO\n};\n\n```", "type": "js" }, { "day_id": 218, "publish_date": "2021-03-20", "name": "介绍你所理解的单例模式?", "content": "介绍你所理解的单例模式?", "type": "md" }, { "day_id": 216, "publish_date": "2021-03-19", "name": "最多能完成排序的块", "content": "```\n题目描述\n    这个问题和“最多能完成排序的块”相似，但给定数组中的元素可以重复，输入数组最大长度为2000，其中的元素最大为10**8。\n    arr是一个可能包含重复元素的整数数组，我们将这个数组分割成几个“块”，并将这些块分别进行排序。之后再连接起来，使得连接的结果和按升序排序后的原数组相同。\n    我们最多能将数组分成多少块？\n\n\n示例 1:\n    输入: arr = [5,4,3,2,1]\n    输出: 1\n    解释:\n    将数组分成2块或者更多块，都无法得到所需的结果。\n    例如，分成 [5, 4], [3, 2, 1] 的结果是 [4, 5, 1, 2, 3]，这不是有序的数组。\n\n\n示例 2:\n    输入: arr = [2,1,3,4,4]\n    输出: 4\n    解释:\n    我们可以把它分成两块，例如 [2, 1], [3, 4, 4]。\n    然而，分成 [2, 1], [3], [4], [4] 可以得到最多的块数。\n\n\n注意:\n    arr的长度在[1, 2000]之间。\n    arr[i]的大小在[0, 10**8]之间。\n\nvar maxChunksToSorted = function (arr) {//TODO}\n```", "type": "js" }, { "day_id": 215, "publish_date": "2021-03-18", "name": "讲一下你所了解的函数式编程", "content": "讲一下你所了解的函数式编程", "type": "md" }, { "day_id": 214, "publish_date": "2021-03-17", "name": "JS为什么要区分微任务和宏任务?", "content": "JS为什么要区分微任务和宏任务?", "type": "md" }, { "day_id": 213, "publish_date": "2021-03-16", "name": "介绍你所理解的迭代器模式?", "content": "介绍你所理解的迭代器模式?", "type": "md" }, { "day_id": 212, "publish_date": "2021-03-15", "name": "字符串解码", "content": "```\n        题目描述:\n            给定一个经过编码的字符串，返回它解码后的字符串。\n            编码规则为: k[encoded_string]，表示其中方括号内部的 encoded_string 正好重复 k 次。注意 k 保证为正整数。\n            你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。\n            此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数 k ，例如不会出现像 3a 或 2[4] 的输入。\n\n        示例 1：\n            输入：s = \"3[a]2[bc]\"\n            输出：\"aaabcbc\"\n\n\n        示例 2：\n            输入：s = \"3[a2[c]]\"\n            输出：\"accaccacc\"\n\n\n        示例 3：\n            输入：s = \"2[abc]3[cd]ef\"\n            输出：\"abcabccdcdcdef\"\n\n\n        示例 4：\n            输入：s = \"abc3[cd]xyz\"\n            输出：\"abccdcdcdxyz\"\n\nvar decodeString = function (s) {//TODO}\n```", "type": "js" }, { "day_id": 211, "publish_date": "2021-03-14", "name": "手动实现数组 Reduce 方法", "content": "手动实现数组 Reduce 方法", "type": "md" }, { "day_id": 210, "publish_date": "2021-03-13", "name": "Vue是如何收集依赖的?", "content": "Vue是如何收集依赖的?", "type": "md" }, { "day_id": 209, "publish_date": "2021-03-12", "name": "用栈实现队列", "content": "```\n    题目描述\n        使用栈实现队列的下列操作：\n\n        push(x) -- 将一个元素放入队列的尾部。\n        pop() -- 从队列首部移除元素。\n        peek() -- 返回队列首部的元素。\n        empty() -- 返回队列是否为空。\n        示例:\n\n        MyQueue queue = new MyQueue();\n\n        queue.push(1);\n        queue.push(2);\n        queue.peek(); // 返回 1\n        queue.pop(); // 返回 1\n        queue.empty(); // 返回 false\n        说明:\n\n        你只能使用标准的栈操作 -- 也就是只有 push to top, peek/pop from top, size, 和 is empty 操作是合法的。\n        你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。\n        假设所有操作都是有效的、 （例如，一个空的队列不会调用 pop 或者 peek 操作）。\n\n\nvar MyQueue = function () {\n    //TODO\n};\n\n/**\n * Push element x to the back of queue. \n * @param {number} x\n * @return {void}\n */\nMyQueue.prototype.push = function (x) {\n    //TODO\n};\n\n/**\n * Removes the element from in front of queue and returns that element.\n * @return {number}\n */\nMyQueue.prototype.pop = function () {\n    //TODO\n};\n\n/**\n * Get the front element.\n * @return {number}\n */\nMyQueue.prototype.peek = function () {\n    //TODO\n};\n\n/**\n * Returns whether the queue is empty.\n * @return {boolean}\n */\nMyQueue.prototype.empty = function () {\n    //TODO\n};\n```", "type": "js" }, { "day_id": 208, "publish_date": "2021-03-11", "name": "对称加密和非对称加密的区别和用处", "content": "对称加密和非对称加密的区别和用处", "type": "md" }, { "day_id": 207, "publish_date": "2021-03-10", "name": "字符的最短距离", "content": "```\n    题目描述\n        给定一个字符串 S 和一个字符 C。返回一个代表字符串 S 中每个字符到字符串 S 中的字符 C 的最短距离的数组。\n\n\n    示例 :\n        输入: S = \"loveleetcode\", C = 'e'\n        输出: [3, 2, 1, 0, 1, 0, 0, 1, 2, 2, 1, 0]\n\n    说明:\n        - 字符串 S 的长度范围为 [1, 10000]。\n        - C 是一个单字符，且保证是字符串 S 里的字符。\n        - S 和 C 中的所有字母均为小写字母。\n\nvar shortestToChar = function (S, C) {//TODO}\n```", "type": "js" }, { "day_id": 206, "publish_date": "2021-03-09", "name": "了解函数式编程中的compose么?", "content": "了解函数式编程中的compose么?", "type": "md" }, { "day_id": 205, "publish_date": "2021-03-08", "name": "介绍你所理解的组合模式?", "content": "介绍你所理解的组合模式?", "type": "md" }, { "day_id": 204, "publish_date": "2021-03-07", "name": "Redux 中间件是如何拿到store和action?", "content": "Redux 中间件是如何拿到store和action?", "type": "md" }, { "day_id": 203, "publish_date": "2021-03-06", "name": "数组形式的整数加法", "content": "```\n    题目描述：\n        对于非负整数 X 而言，X 的数组形式是每位数字按从左到右的顺序形成的数组。例如，如果 X = 1231，那么其数组形式为 [1,2,3,1]。给定非负整数 X 的数组形式 A，返回整数 X+K 的数组形式。\n\n    示例 1：\n\n        输入：A = [1,2,0,0], K = 34\n        输出：[1,2,3,4]\n        解释：1200 + 34 = 1234\n    示例 2：\n\n        输入：A = [2,7,4], K = 181\n        输出：[4,5,5]\n        解释：274 + 181 = 455\n\n\n    示例 3：\n        输入：A = [9,9,9,9,9,9,9,9,9,9], K = 1\n        输出：[1,0,0,0,0,0,0,0,0,0,0]\n        解释：9999999999 + 1 = 10000000000\n\n\n    提示：\n\n        1 <= A.length <= 10000\n        0 <= A[i] <= 9\n        0 <= K <= 10000\n        如果 A.length > 1，那么 A[0] != 0\n\n\nvar addToArrayForm = function (A, K) {//TODO}\n```", "type": "js" }, { "day_id": 202, "publish_date": "2021-03-05", "name": "请解释下jsonp的工作原理", "content": "请解释下jsonp的工作原理", "type": "md" }, { "day_id": 201, "publish_date": "2021-03-04", "name": "查找数组元素位置", "content": " 找出元素item在给定数组arr中的位置\n 描述：如果数组中存在item就返回元素在数组中的位置，否则就会返回-1\n [1,2,3,4,5,6] --> 存在3就输出2，存在7输出-1\n  ```js\nfunction indexOf(arr, item) {\n//TODO\n}\n```", "type": "js" }, { "day_id": 200, "publish_date": "2021-03-03", "name": "给定一个整数数组，请找出两个元素之间的最大差，较小值的元素必须位于较大元素之前", "content": "给定一个整数数组，请找出两个元素之间的最大差，较小值的元素必须位于较大元素之前\n```js\nconst array = [7, 8, 15, 9, 20, 3, 1, 10];\nfindLargestDifference(array)\nfunction findLargestDifference(array) {\n//TODO\n}//符合条件的两个数字:7和20\n```", "type": "js" }, { "day_id": 199, "publish_date": "2021-03-02", "name": " **优先级顺序**  请输出结果并进行解释", "content": "```\n// 优先级顺序  请输出结果并进行解释\nvar val = 'smtg';\nconsole.log('Value is ' + (val === 'smtg') ? 'Something' : 'Nothing'); \n```", "type": "md" }, { "day_id": 198, "publish_date": "2021-03-01", "name": " **神奇的null**  请输出结果并进行解释", "content": "```\n// 神奇的null  请输出结果并进行解释\nconsole.log([typeof null, null instanceof Object])\n```", "type": "md" }, { "day_id": 197, "publish_date": "2021-02-28", "name": "在末尾添加元素", "content": "在末尾添加元素\n描述：在数组arr末尾添加元素item，不要直接修改数组arr，结果返回新数组\n [1,2,3] 添加元素4 返回新数组[1,2,3,4]", "type": "js" }, { "day_id": 196, "publish_date": "2021-02-27", "name": " 移除数组中的元素(返回新的数组)", "content": "移除数组中的元素(返回新的数组)\n描述：移除数组arr中的所有值和item相等的元素。不要直接修改数组，结果返回新的数组\n```js\n  function remove(arr, item) { //TODO}\n  let newArray = remove([1,2,3,4,2],2);//[1,3,4]\n```", "type": "js" }, { "day_id": 195, "publish_date": "2021-02-26", "name": "微服务和单体应用的区别是什么？", "content": "微服务和单体应用的区别是什么？", "type": "md" }, { "day_id": 187, "publish_date": "2021-02-25", "name": "node性能如何优化？", "content": "node性能如何优化？", "type": "md" }, { "day_id": 183, "publish_date": "2021-02-24", "name": "介绍下你所理解的React设计思路,它的理念是什么?", "content": "介绍下你所理解的React设计思路,它的理念是什么?", "type": "md" }, { "day_id": 185, "publish_date": "2021-02-23", "name": "实现单点登录的原理", "content": "实现单点登录的原理", "type": "md" }, { "day_id": 186, "publish_date": "2021-02-22", "name": "什么是 CDN 服务?", "content": "什么是 CDN 服务?", "type": "md" }, { "day_id": 189, "publish_date": "2021-02-21", "name": "说一下你理解的CORS。", "content": "说一下你理解的CORS。", "type": "md" }, { "day_id": 184, "publish_date": "2021-02-07", "name": "给定一个整数数组，找到从三个整数中产生的最大乘积", "content": "给定一个整数数组，\n找到从三个整数中产生的最大乘积\n```js\nconst unsortedArray = [-10, 7, 2, 3, \n5, -1, -7];\ncomputeProduct(unsortedArray)\n```\n实现computeProduct函数\n", "type": "js" }, { "day_id": 188, "publish_date": "2021-02-06", "name": "求两个数组的交集", "content": "求两个数组的交集\nconst firstArray = [2, 2, 4, 1];\nconst secondArray = [1, 2, 0, 2];\nintersection(firstArray, secondArray);\n实现intersection函数", "type": "js" }, { "day_id": 194, "publish_date": "2021-02-05", "name": "**filter过滤器**   请输出结果并进行解释", "content": "```\n//filter过滤器  请输出结果并进行解释\nvar ary = [0,1,2];\nary[10] = 10;\nary.filter(function(x) {\n  return x === undefined;\n});\n```", "type": "md" }, { "day_id": 193, "publish_date": "2021-02-04", "name": " 添加元素(指定位置添加)", "content": "添加元素(指定位置添加)\n描述：在数组arr的index处添加元素item，不要直接修改数组arr，结果返回新的数组\n[1,2,3]  2,6  结果为[1,2,6,3]", "type": "js" }, { "day_id": 192, "publish_date": "2021-02-03", "name": "**提升变量**  请输出结果并进行解释", "content": "```\n//提升变量  请输出结果并进行解释\nvar name = 'spring';\n(function () {\n    if (typeof name === 'undefined') {\n      var name = 'summer';\n      console.log(name);\n    } else {\n      console.log(name);\n    }\n})();\n```", "type": "md" }, { "day_id": 191, "publish_date": "2021-02-02", "name": "**字符串陷阱**    请输出结果并进行解释", "content": "```\n//字符串陷阱   请输出结果并进行解释\nfunction showCase(value) {\n  switch(value) {\n    case 'A':\n      console.log('Case A');\n      break;\n    case 'B':\n      console.log('Case B');\n      break;\n    case undefined:\n      console.log('undefined');\n      break;\n    default:\n      console.log('Do not know!');\n  }\n}\nshowCase(new String('A'));\n\n```", "type": "md" }, { "day_id": 190, "publish_date": "2021-02-01", "name": "查找重复元素", "content": "查找重复元素\n描述：找出数组arr中重复出现过的元素\n[1,2,3,4,1,2,2,2]  [1,2]", "type": "js" }, { "day_id": 182, "publish_date": "2021-01-31", "name": "vue双向数据绑定原理?", "content": "vue双向数据绑定原理?", "type": "md" }, { "day_id": 181, "publish_date": "2021-01-30", "name": "什么是微服务？", "content": "什么是微服务？", "type": "md" }, { "day_id": 180, "publish_date": "2021-01-29", "name": "Node 更适合处理 I/O 密集型任务还是 CPU 密集型任务,为什么?", "content": "Node 更适合处理 I/O 密集型任务还是 CPU 密集型任务,为什么?", "type": "md" }, { "day_id": 179, "publish_date": "2021-01-28", "name": "为什么useState要使用数组而不是对象?", "content": "为什么useState要使用数组而不是对象?", "type": "md" }, { "day_id": 178, "publish_date": "2021-01-27", "name": "node性能如何监控？", "content": "node性能如何监控？", "type": "md" }, { "day_id": 177, "publish_date": "2021-01-26", "name": "CDN 访问过程是什么？", "content": "CDN 访问过程是什么？", "type": "md" }, { "day_id": 176, "publish_date": "2021-01-25", "name": "addEventListener在removeListener会不会造成内存泄露?", "content": "addEventListener在removeListener会不会造成内存泄露?", "type": "md" }, { "day_id": 175, "publish_date": "2021-01-24", "name": "require模式引入的查找方式是什么?", "content": "require模式引入的查找方式是什么?", "type": "md" }, { "day_id": 174, "publish_date": "2021-01-23", "name": "Reflect 对象创建目的是什么?", "content": "Reflect 对象创建目的是什么?", "type": "md" }, { "day_id": 173, "publish_date": "2021-01-22", "name": "用微服务有什么好处？", "content": "用微服务有什么好处？", "type": "md" }, { "day_id": 172, "publish_date": "2021-01-21", "name": "说一下ajax/axios/fetch三者的区别", "content": "说一下ajax/axios/fetch三者的区别", "type": "md" }, { "day_id": 171, "publish_date": "2021-01-20", "name": "SSL 连接断开后如何恢复 ?", "content": "SSL 连接断开后如何恢复 ?", "type": "md" }, { "day_id": 170, "publish_date": "2021-01-19", "name": "你所理解的前端路由是什么?", "content": "你所理解的前端路由是什么?", "type": "md" }, { "day_id": 169, "publish_date": "2021-01-18", "name": "介绍你所理解的中介者模式?", "content": "介绍你所理解的中介者模式?", "type": "md" }, { "day_id": 168, "publish_date": "2021-01-17", "name": "说一下React setState原理", "content": "说一下React setState原理", "type": "md" }, { "day_id": 167, "publish_date": "2021-01-16", "name": "介绍下 vue-router 中的导航钩子函数", "content": "介绍下 vue-router 中的导航钩子函数", "type": "md" }, { "day_id": 159, "publish_date": "2021-01-15", "name": "数组去重", "content": "数组去重\nconst array = [1, 2, 3, 1, 9, 1, 2, 8]", "type": "js" }, { "day_id": 166, "publish_date": "2021-01-14", "name": "说一下base64的编码方式", "content": "说一下base64的编码方式", "type": "md" }, { "day_id": 165, "publish_date": "2021-01-13", "name": "面向对象的三要素是什么，分别是什么意思?", "content": "面向对象的三要素是什么，分别是什么意思?", "type": "md" }, { "day_id": 164, "publish_date": "2021-01-12", "name": "使用 Object.defineProperty() 来进行数据劫持有什么缺点?", "content": "使用 Object.defineProperty() 来进行数据劫持有什么缺点?", "type": "md" }, { "day_id": 163, "publish_date": "2021-01-11", "name": "说一下import的原理，和require的不同之处在哪儿?", "content": "说一下import的原理，和require的不同之处在哪儿?", "type": "md" }, { "day_id": 161, "publish_date": "2021-01-10", "name": "什么是函数柯里化?", "content": "什么是函数柯里化?", "type": "md" }, { "day_id": 162, "publish_date": "2021-01-09", "name": "异步编程的实现方式是什么?", "content": "异步编程的实现方式是什么?", "type": "md" }, { "day_id": 160, "publish_date": "2021-01-08", "name": "说一下你所了解的react-fiber?", "content": "说一下你所了解的react-fiber?", "type": "md" }, { "day_id": 152, "publish_date": "2021-01-07", "name": "SGML、HTML、XML和XHTML的区别?", "content": "SGML、HTML、XML和XHTML的区别?", "type": "md" }, { "day_id": 158, "publish_date": "2021-01-06", "name": "说一下你所理解的观察者模式?", "content": "说一下你所理解的观察者模式?", "type": "md" }, { "day_id": 157, "publish_date": "2021-01-05", "name": "说一下你理解的 HTTPS 中间人攻击 ?", "content": "说一下你理解的 HTTPS 中间人攻击 ?", "type": "md" }, { "day_id": 156, "publish_date": "2021-01-04", "name": "React key是干什么用的,为什么要加上key呢?", "content": "React key是干什么用的,为什么要加上key呢?", "type": "md" }, { "day_id": 155, "publish_date": "2021-01-03", "name": "js继承的几种实现方式?", "content": "js继承的几种实现方式?", "type": "md" }, { "day_id": 154, "publish_date": "2021-01-02", "name": "什么是文档的预解析?(浏览器解析过程)", "content": "什么是文档的预解析?(浏览器解析过程)", "type": "md" }, { "day_id": 153, "publish_date": "2021-01-01", "name": "常见浏览器所用的内核", "content": "常见浏览器所用的内核？", "type": "md" }, { "day_id": 151, "publish_date": "2020-12-31", "name": "说一下对DTD的理解。", "content": "说一下对DTD的理解？", "type": "md" }, { "day_id": 150, "publish_date": "2020-12-30", "name": "HTML5有哪些新特性、移除了哪些元素?", "content": "HTML5有哪些新特性、移除了哪些元素?", "type": "md" }, { "day_id": 149, "publish_date": "2020-12-29", "name": "Symbol 值的强制类型转换?", "content": "Symbol 值的强制类型转换?", "type": "md" }, { "day_id": 148, "publish_date": "2020-12-28", "name": "DOMContentLoaded事件和Load事件的区别?", "content": "DOMContentLoaded事件和Load事件的区别?", "type": "md" }, { "day_id": 147, "publish_date": "2020-12-27", "name": "说一下你所了解的javascript的作用域链?", "content": "说一下你所了解的javascript的作用域链?", "type": "md" }, { "day_id": 146, "publish_date": "2020-12-26", "name": "css如何阻塞文档解析?(浏览器解析过程)", "content": "css如何阻塞文档解析?(浏览器解析过程)", "type": "md" }, { "day_id": 145, "publish_date": "2020-12-25", "name": "标准模式与兼容模式各有什么区别?", "content": "标准模式与兼容模式各有什么区别?", "type": "md" }, { "day_id": 144, "publish_date": "2020-12-24", "name": "CSS选择符有哪些?", "content": "CSS选择符有哪些?", "type": "md" }, { "day_id": 143, "publish_date": "2020-12-23", "name": "什么是DOM和BOM?", "content": "什么是DOM和BOM?", "type": "md" }, { "day_id": 142, "publish_date": "2020-12-22", "name": "如何判断一个对象是否属于某个类?", "content": "如何判断一个对象是否属于某个类?", "type": "md" }, { "day_id": 141, "publish_date": "2020-12-21", "name": "说一下你所理解的渲染原理?", "content": "说一下你所理解的渲染原理?", "type": "md" }, { "day_id": 140, "publish_date": "2020-12-20", "name": "扫描二维码登录网页是什么原理，前后两个事件是如何联系的?", "content": "扫描二维码登录网页是什么原理，前后两个事件是如何联系的?", "type": "md" }, { "day_id": 139, "publish_date": "2020-12-19", "name": "介绍一下你对浏览器内核的理解?", "content": "介绍一下你对浏览器内核的理解?", "type": "md" }, { "day_id": 138, "publish_date": "2020-12-18", "name": "如何处理HTML5新标签的浏览器兼容问题?", "content": "如何处理HTML5新标签的浏览器兼容问题?", "type": "md" }, { "day_id": 137, "publish_date": "2020-12-17", "name": "CSS多列等高如何实现?", "content": "CSS多列等高如何实现?", "type": "md" }, { "day_id": 136, "publish_date": "2020-12-16", "name": "margin和padding分别适合什么场景使用?", "content": "margin和padding分别适合什么场景使用?", "type": "md" }, { "day_id": 135, "publish_date": "2020-12-15", "name": "如何解决跨域问题?", "content": "如何解决跨域问题?(js问题)", "type": "md" }, { "day_id": 134, "publish_date": "2020-12-14", "name": "说一下Vue template到render的过程", "content": "说一下Vue template到render的过程？", "type": "md" }, { "day_id": 133, "publish_date": "2020-12-13", "name": "React 高阶组件、Render props和hooks有什么区别,为什么不断迭代?", "content": "React 高阶组件、Render props和hooks有什么区别,为什么不断迭代?", "type": "md" }, { "day_id": 132, "publish_date": "2020-12-12", "name": "检测浏览器版本版本有哪些方式?", "content": "检测浏览器版本版本有哪些方式?", "type": "md" }, { "day_id": 131, "publish_date": "2020-12-11", "name": "内部属性[[Class]]是什么?", "content": "内部属性[[Class]]是什么?(js部分)", "type": "md" }, { "day_id": 130, "publish_date": "2020-12-10", "name": "说一下你所理解JavaScript中的作用域与变量声明提升?", "content": "说一下你所理解JavaScript中的作用域与变量声明提升?", "type": "md" }, { "day_id": 129, "publish_date": "2020-12-09", "name": "javascript 创建对象的几种方式?", "content": "javascript 创建对象的几种方式?", "type": "md" }, { "day_id": 128, "publish_date": "2020-12-08", "name": "你所理解,同步和异步的区别是什么?", "content": "你所理解,同步和异步的区别是什么?(js部分)", "type": "md" }, { "day_id": 127, "publish_date": "2020-12-07", "name": "说一下Vue的生命周期以及每个阶段做的事情", "content": "说一下Vue的生命周期以及每个阶段做的事情。", "type": "md" }, { "day_id": 126, "publish_date": "2020-12-06", "name": "什么是 Polyfill ?", "content": "什么是 Polyfill ?(js部分)", "type": "md" }, { "day_id": 125, "publish_date": "2020-12-05", "name": "javascript 代码中的\"use strict\"是什么意思?为什么使用它?", "content": "javascript 代码中的\"use strict\"是什么意思?为什么使用它?", "type": "md" }, { "day_id": 124, "publish_date": "2020-12-04", "name": "componentWillReceiveProps的触发条件是什么？", "content": "componentWillReceiveProps的触发条件是什么？", "type": "md" }, { "day_id": 119, "publish_date": "2020-12-03", "name": "说一下html布局元素的分类有哪些?以描述下每种布局元素的应用场景么?", "content": "说一下html布局元素的分类有哪些?以描述下每种布局元素的应用场景么?", "type": "md" }, { "day_id": 123, "publish_date": "2020-12-02", "name": "渲染页面时常见的不良现象有哪些?(浏览器渲染过程)", "content": "渲染页面时常见的不良现象有哪些?(浏览器渲染过程)", "type": "md" }, { "day_id": 122, "publish_date": "2020-12-01", "name": "说一说对JSON的理解?", "content": "说一说对JSON的理解?", "type": "md" }, { "day_id": 121, "publish_date": "2020-11-30", "name": "简单说一下V8引擎的垃圾回收机制", "content": "简单说一下V8引擎的垃圾回收机制？", "type": "md" }, { "day_id": 118, "publish_date": "2020-11-29", "name": "前端需要注意哪些SEO?", "content": "前端需要注意哪些SEO?", "type": "md" }, { "day_id": 117, "publish_date": "2020-11-28", "name": "display、position和float的相互关系?", "content": "display、position和float的相互关系?", "type": "md" }, { "day_id": 120, "publish_date": "2020-11-27", "name": "网页验证码是干嘛的，是为了解决什么安全问题?", "content": "网页验证码是干嘛的，是为了解决什么安全问题?", "type": "md" }, { "day_id": 116, "publish_date": "2020-11-26", "name": "说一下你理解margin重叠的问题.", "content": "说一下你理解margin重叠的问题.", "type": "md" }, { "day_id": 115, "publish_date": "2020-11-25", "name": "什么是浏览器的同源策略?", "content": "什么是浏览器的同源策略?", "type": "md" }, { "day_id": 114, "publish_date": "2020-11-24", "name": "哪些操作会造成内存泄漏?", "content": "哪些操作会造成内存泄漏?", "type": "md" }, { "day_id": 113, "publish_date": "2020-11-23", "name": "for..in和Object.keys的区别", "content": "for..in和Object.keys的区别是什么？", "type": "md" }, { "day_id": 112, "publish_date": "2020-11-22", "name": "请说出目前主流的js模块化实现的技术有哪些?他们的区别在哪儿?", "content": "请说出目前主流的js模块化实现的技术有哪些?他们的区别在哪儿?", "type": "md" }, { "day_id": 111, "publish_date": "2020-11-21", "name": "简单介绍使用图片base64编码的优点和缺点.", "content": "简单介绍使用图片base64编码的优点和缺点?", "type": "md" }, { "day_id": 110, "publish_date": "2020-11-20", "name": "谈谈你对ajax的理解?", "content": "谈谈你对ajax的理解?", "type": "md" }, { "day_id": 109, "publish_date": "2020-11-19", "name": "说说你对浏览器的理解?", "content": "说说你对浏览器的理解?", "type": "md" }, { "day_id": 108, "publish_date": "2020-11-18", "name": "iframe有哪些缺点?", "content": "iframe有哪些缺点?", "type": "md" }, { "day_id": 107, "publish_date": "2020-11-17", "name": "DOCTYPE 的作用是什么?", "content": "DOCTYPE 的作用是什么?", "type": "md" }, { "day_id": 106, "publish_date": "2020-11-16", "name": "三种事件模型是什么?", "content": "三种事件模型是什么?", "type": "md" }, { "day_id": 105, "publish_date": "2020-11-15", "name": "Object.is()与原来的比较操作符 \"===\" 、\"==\" 的区别?", "content": "Object.is()与原来的比较操作符 \"===\" 、\"==\" 的区别?", "type": "md" }, { "day_id": 104, "publish_date": "2020-11-14", "name": "渲染过程中遇到JS文件怎么处理?(浏览器解析过程)", "content": "渲染过程中遇到JS文件怎么处理?(浏览器解析过程)", "type": "md" }, { "day_id": 103, "publish_date": "2020-11-13", "name": "link 标签定义", "content": "link 标签定义是什么?", "type": "md" }, { "day_id": 102, "publish_date": "2020-11-12", "name": "说一下koa2和express区别?", "content": "说一下koa2和express区别?", "type": "md" }, { "day_id": 101, "publish_date": "2020-11-11", "name": "为什么不建议使用通配符初始化css样式?", "content": "为什么不建议使用通配符初始化css样式?", "type": "md" }, { "day_id": 100, "publish_date": "2020-11-10", "name": "React事件绑定原理是什么？", "content": "React事件绑定原理是什么？", "type": "md" }, { "day_id": 99, "publish_date": "2020-11-09", "name": "实现数组扁平化", "content": "如何实现数组扁平化？\n```js\nconst arr = [1, [2, [3, [4, 5]]], 6];\n// => [1, 2, 3, 4, 5, 6]\n```", "type": "md" }, { "day_id": 98, "publish_date": "2020-11-08", "name": "描述下JS中Prototype的概念？", "content": "描述下JS中Prototype的概念？", "type": "md" }, { "day_id": 97, "publish_date": "2020-11-07", "name": "实现数组去重", "content": "如何实现数组去重？\n```js\nconst arr = [1, 1, '1', 17, true, true, false, false, 'true', 'a', {}, {}];\n// => [1, '1', 17, true, false, 'true', 'a', {}, {}]\n```", "type": "md" }, { "day_id": 96, "publish_date": "2020-11-06", "name": "能说下 vue-router 中常用的 hash 和 history 路由模式实现原理吗？", "content": "能说下 vue-router 中常用的 hash 和 history 路由模式实现原理吗？", "type": "md" }, { "day_id": 95, "publish_date": "2020-11-05", "name": "子组件可以直接改变父组件的数据么？说说你的理由？(vue部分)", "content": "子组件可以直接改变父组件的数据么？说说你的理由？(vue部分)", "type": "md" }, { "day_id": 94, "publish_date": "2020-11-04", "name": "React SSR实现原理是什么,需要注意什么事项？", "content": "React SSR实现原理是什么,需要注意什么事项？", "type": "md" }, { "day_id": 93, "publish_date": "2020-11-03", "name": "React SSR实现过程？", "content": "React SSR实现过程?", "type": "md" }, { "day_id": 92, "publish_date": "2020-11-02", "name": "怎样理解 Vue 的单向数据流？", "content": "怎样理解 Vue 的单向数据流？", "type": "md" }, { "day_id": 91, "publish_date": "2020-11-01", "name": "v-model是如何实现的，语法糖实际是什么？", "content": "v-model是如何实现的，语法糖实际是什么？", "type": "md" }, { "day_id": 89, "publish_date": "2020-10-31", "name": "说一下Vue单页与多页的区别?", "content": "说一下Vue单页与多页的区别?(vue部分)", "type": "md" }, { "day_id": 90, "publish_date": "2020-10-30", "name": "说一下Vue的$nextTick原理", "content": "说一下Vue的$nextTick原理？", "type": "md" }, { "day_id": 88, "publish_date": "2020-10-29", "name": "说明下JS继承的原理？", "content": "说明下JS继承的原理？", "type": "md" }, { "day_id": 87, "publish_date": "2020-10-28", "name": "什么情况下出现浏览器分层？(css部分)", "content": "什么情况下出现浏览器分层？(css部分)", "type": "md" }, { "day_id": 86, "publish_date": "2020-10-27", "name": "使用过 Vue SSR 吗？说说 SSR？", "content": "使用过 Vue SSR 吗？说说 SSR？", "type": "md" }, { "day_id": 85, "publish_date": "2020-10-26", "name": "说一下Vue 的父组件和子组件生命周期钩子函数执行顺序？", "content": "说一下Vue 的父组件和子组件生命周期钩子函数执行顺序？", "type": "md" }, { "day_id": 84, "publish_date": "2020-10-25", "name": "Vue 中的 key 有什么作用?", "content": "Vue 中的 key 有什么作用?", "type": "md" }, { "day_id": 83, "publish_date": "2020-10-24", "name": "说一下关于tree-shaking的原理", "content": "说一下关于tree-shaking的原理？(webpack部分)", "type": "md" }, { "day_id": 82, "publish_date": "2020-10-23", "name": "类数组转化为数组", "content": "如何类数组转化为数组？", "type": "md" }, { "day_id": 81, "publish_date": "2020-10-22", "name": "React怎么做数据检查和变化？", "content": "React怎么做数据检查和变化？", "type": "md" }, { "day_id": 80, "publish_date": "2020-10-21", "name": "说一下单向数流有什么好处？", "content": "说一下单向数流有什么好处？(React部分)", "type": "md" }, { "day_id": 79, "publish_date": "2020-10-20", "name": "BFC是什么？触发BFC的条件是什么？有哪些应用场景？", "content": "BFC是什么？触发BFC的条件是什么？有哪些应用场景？", "type": "md" }, { "day_id": 78, "publish_date": "2020-10-19", "name": "如何理解事件委托？", "content": "如何理解事件委托？", "type": "md" }, { "day_id": 77, "publish_date": "2020-10-18", "name": "请你谈谈对无状态的理解(React部分)", "content": "请你谈谈对无状态的理解（React部分）", "type": "md" }, { "day_id": 75, "publish_date": "2020-10-17", "name": "回调函数和任务队列的区别", "content": "回调函数和任务队列的区别(js部分)", "type": "md" }, { "day_id": 76, "publish_date": "2020-10-16", "name": "写出常用的页面优化实现方案？", "content": "写出常用的页面优化实现方案？", "type": "md" }, { "day_id": 74, "publish_date": "2020-10-15", "name": "说明一下JS封装的原理", "content": "说明一下JS封装的原理", "type": "md" }, { "day_id": 73, "publish_date": "2020-10-14", "name": "在哪个生命周期内调用异步请求？", "content": "在哪个生命周期内调用异步请求？(Vue部分)", "type": "md" }, { "day_id": 72, "publish_date": "2020-10-13", "name": "项目如何管理模块？", "content": "项目如何管理模块？(开放题)", "type": "md" }, { "day_id": 71, "publish_date": "2020-10-12", "name": "Vue 组件间通信有哪几种方式？", "content": "Vue 组件间通信有哪几种方式？", "type": "md" }, { "day_id": 70, "publish_date": "2020-10-11", "name": "直接给一个数组项赋值，Vue 能检测到变化吗？", "content": "直接给一个数组项赋值，Vue 能检测到变化吗？", "type": "md" }, { "day_id": 69, "publish_date": "2020-10-10", "name": "使用TS的优势有哪些?", "content": "使用TS的优势有哪些?", "type": "md" }, { "day_id": 68, "publish_date": "2020-10-09", "name": "webpack 里面的插件是如何实现的？", "content": "webpack 里面的插件是如何实现的？", "type": "md" }, { "day_id": 66, "publish_date": "2020-10-08", "name": "说一下你对React context的理解", "content": "说一下你对React context的理解？", "type": "md" }, { "day_id": 67, "publish_date": "2020-10-07", "name": "说一下mysql和mongodb的区别?", "content": "说一下mysql和mongodb的区别?", "type": "md" }, { "day_id": 63, "publish_date": "2020-10-06", "name": "为什么组件中的 data 必须是一个函数，然后 return 一个对象，而 new Vue 实例里，data 可以直接是一个对象？", "content": "为什么组件中的 data 必须是一个函数，然后 return 一个对象，而 new Vue 实例里，data 可以直接是一个对象？", "type": "md" }, { "day_id": 64, "publish_date": "2020-10-05", "name": "Redux和Vuex有什么区别,说一下它们的共同思想?", "content": "Redux和Vuex有什么区别,说一下它们的共同思想?", "type": "md" }, { "day_id": 61, "publish_date": "2020-10-04", "name": "使用import时，webpack对node_modules里的依赖会做什么?", "content": "使用import时，webpack对node_modules里的依赖会做什么?", "type": "md" }, { "day_id": 65, "publish_date": "2020-10-03", "name": "说一下React.Component和React.PureComponent的区别", "content": "说一下React.Component和React.PureComponent的区别(React部分)", "type": "md" }, { "day_id": 62, "publish_date": "2020-10-02", "name": "关于对 Vue 项目进行优化，你有哪些方法?", "content": "关于对 Vue 项目进行优化，你有哪些方法?", "type": "md" }, { "day_id": 60, "publish_date": "2020-10-01", "name": "webpack如何用localStorage离线缓存静态资源？", "content": "webpack如何用localStorage离线缓存静态资源？", "type": "md" }, { "day_id": 59, "publish_date": "2020-09-30", "name": "webpack做了什么？使用webpack构建是有无做了一些自定义操作？", "content": "webpack做了什么？使用webpack构建是有无做了一些自定义操作？", "type": "md" }, { "day_id": 58, "publish_date": "2020-09-29", "name": "说说你理解的node 中间层怎样做的请求合并转发？", "content": "说说你理解的node 中间层怎样做的请求合并转发？", "type": "md" }, { "day_id": 57, "publish_date": "2020-09-28", "name": "CDN有哪些优化静态资源加载速度的机制？", "content": "CDN有哪些优化静态资源加载速度的机制？", "type": "md" }, { "day_id": 56, "publish_date": "2020-09-27", "name": "与HTTP相关的协议有哪些？TCP/IP DNS URI/URL HTTPS", "content": "与HTTP相关的协议有哪些？TCP/IP DNS URI/URL HTTPS", "type": "md" }, { "day_id": 55, "publish_date": "2020-09-26", "name": "CSS预处理器的好处", "content": "CSS预处理器的好处？", "type": "md" }, { "day_id": 54, "publish_date": "2020-09-25", "name": "promise有没有解决异步的问题？", "content": "promise有没有解决异步的问题？", "type": "md" }, { "day_id": 53, "publish_date": "2020-09-24", "name": "点击一个按钮，浏览器会做些什么事情？", "content": "点击一个按钮，浏览器会做些什么事情【呈现效果时流程】？(js部分)", "type": "md" }, { "day_id": 52, "publish_date": "2020-09-23", "name": "怎么处理项目中的异常捕获行为？", "content": "怎么处理项目中的异常捕获行为？（js部分）", "type": "md" }, { "day_id": 51, "publish_date": "2020-09-22", "name": "添加原生事件不移除为什么会内存泄漏，还有哪些地方会存在内存泄漏？", "content": "添加原生事件不移除为什么会内存泄漏，还有哪些地方会存在内存泄漏？(js部分)", "type": "md" }, { "day_id": 50, "publish_date": "2020-09-21", "name": "react-redux的工作流程是什么？", "content": "react-redux的工作流程是什么？(React部分)", "type": "md" }, { "day_id": 49, "publish_date": "2020-09-20", "name": "React里setState到底是异步还是同步？", "content": "React里setState到底是异步还是同步？", "type": "md" }, { "day_id": 48, "publish_date": "2020-09-19", "name": "shouldComponentUpdate是为了解决什么问题？", "content": "shouldComponentUpdate是为了解决什么问题？(React问题)", "type": "md" }, { "day_id": 47, "publish_date": "2020-09-18", "name": "Css预处理器的概念", "content": "CSS预处理器的概念", "type": "md" }, { "day_id": 46, "publish_date": "2020-09-17", "name": "说一下mobx和redux有什么区别？", "content": "说一下mobx和redux有什么区别？(React)", "type": "md" }, { "day_id": 45, "publish_date": "2020-09-16", "name": "Promise 构造函数是同步还是异步执行，then呢？", "content": "Promise 构造函数是同步还是异步执行，then呢？（js部分）", "type": "md" }, { "day_id": 44, "publish_date": "2020-09-15", "name": "React组件中怎么做事件代理？它的原理是什么？", "content": "React组件中怎么做事件代理？它的原理是什么？", "type": "md" }, { "day_id": 43, "publish_date": "2020-09-14", "name": "请描述下css盒模型基本概念", "content": "请描述下css盒模型基本概念", "type": "md" }, { "day_id": 42, "publish_date": "2020-09-13", "name": "说一下Vue的keep-alive是如何实现的，具体缓存的是什么？", "content": "说一下Vue的keep-alive是如何实现的，具体缓存的是什么？\n", "type": "md" }, { "day_id": 41, "publish_date": "2020-09-12", "name": "介绍React高阶组件，适用于什么场景？", "content": "介绍React高阶组件，适用于什么场景？", "type": "md" }, { "day_id": 40, "publish_date": "2020-09-11", "name": "词法作用域和this的区别", "content": "词法作用域和this的区别？(js部分)", "type": "md" }, { "day_id": 39, "publish_date": "2020-09-10", "name": "响应式布局用到的技术有几种方式？", "content": "响应式布局用到的技术有几种方式？", "type": "md" }, { "day_id": 38, "publish_date": "2020-09-09", "name": "移动端需要注意什么？", "content": "移动端需要注意什么问题？", "type": "md" }, { "day_id": 37, "publish_date": "2020-09-08", "name": "对虚拟DOM的理解？虚拟DOM主要做了什么？虚拟DOM本身是什么？", "content": "对虚拟DOM的理解？虚拟DOM主要做了什么？虚拟DOM本身是什么？(vue部分)", "type": "md" }, { "day_id": 36, "publish_date": "2020-09-07", "name": "请用JS代码实现事件代理", "content": "请用JS代码实现事件代理。(js部分)", "type": "md" }, { "day_id": 35, "publish_date": "2020-09-06", "name": "布局都有什么方式，float和position有什么区别？", "content": "布局都有什么方式，float和position有什么区别？（css部分）", "type": "md" }, { "day_id": 34, "publish_date": "2020-09-05", "name": "说一下栈和堆的区别，垃圾回收时栈和堆的区别？", "content": "说一下栈和堆的区别，垃圾回收时栈和堆的区别？（js部分）", "type": "md" }, { "day_id": 33, "publish_date": "2020-09-04", "name": "react里组件通信有几种方式，分别怎样进行通信？", "content": "react里组件通信有几种方式，分别怎样进行通信？", "type": "md" }, { "day_id": 32, "publish_date": "2020-09-03", "name": "HTTP请求特征是什么？", "content": "HTTP请求特征是什么？", "type": "md" }, { "day_id": 31, "publish_date": "2020-09-02", "name": "如何加快页面渲染速度，都有哪些方式？", "content": "如何加快页面渲染速度，都有哪些方式？(js部分)", "type": "md" }, { "day_id": 30, "publish_date": "2020-09-01", "name": "webpack打包时Hash码是怎样生成的？随机值存在一样的情况，如何避免？", "content": "webpack打包时Hash码是怎样生成的？随机值存在一样的情况，如何避免？", "type": "md" }, { "day_id": 29, "publish_date": "2020-08-31", "name": "浏览器缓存机制(3)对于开发很重要，缓存位置的内容能了解多少呢？", "content": "浏览器缓存机制(3)对于开发很重要，缓存位置的内容能了解多少呢？", "type": "md" }, { "day_id": 28, "publish_date": "2020-08-30", "name": "webpack热更新的原理", "content": "谈谈关于对webpack热更新的原理。", "type": "md" }, { "day_id": 27, "publish_date": "2020-08-29", "name": "如何实现 webpack 持久化缓存?", "content": "如何实现 webpack 持久化缓存?", "type": "md" }, { "day_id": 26, "publish_date": "2020-08-28", "name": "dev-server是怎么跑起来的？", "content": "dev-server是怎么跑起来的？(webpack部分)", "type": "md" }, { "day_id": 25, "publish_date": "2020-08-27", "name": "Import和CommonJs在webpack打包过程中有什么不同", "content": "Import和CommonJs在webpack打包过程中有什么不同?", "type": "md" }, { "day_id": 24, "publish_date": "2020-08-26", "name": "webpack的构建流程是什么？", "content": "webpack的构建流程是什么？", "type": "md" }, { "day_id": 23, "publish_date": "2020-08-25", "name": "说一下事件循环机制(node 浏览器)", "content": "说一下事件循环机制(node 浏览器)", "type": "md" }, { "day_id": 22, "publish_date": "2020-08-24", "name": "浏览器缓存机制(2)对于开发很重要，协商缓存的内容能了解多少呢？", "content": "浏览器缓存机制(2)对于开发很重要，协商缓存的内容能了解多少呢？", "type": "md" }, { "day_id": 21, "publish_date": "2020-08-23", "name": "Vuex和localStorage的区别是什么？", "content": "Vuex和localStorage的区别是什么？", "type": "md" }, { "day_id": 20, "publish_date": "2020-08-22", "name": "CSS伪类和伪元素区别", "content": "CSS伪类和伪元素区别", "type": "md" }, { "day_id": 19, "publish_date": "2020-08-21", "name": "能不能说一说CSRF攻击？", "content": "能不能说一说CSRF攻击？", "type": "md" }, { "day_id": 18, "publish_date": "2020-08-20", "name": "常见的plugin以及作用的总结", "content": "常见的plugin以及作用的总结(webpack部分)", "type": "md" }, { "day_id": 17, "publish_date": "2020-08-19", "name": "简单说下你理解的语义化，怎样来保证你写的符合语义化？HTML5语义化标签了解下？", "content": "简单说下你理解的语义化，怎样来保证你写的符合语义化？HTML5语义化标签了解下？", "type": "md" }, { "day_id": 16, "publish_date": "2020-08-18", "name": "谈谈你对重绘和回流的理解？", "content": "谈谈你对重绘和回流的理解？", "type": "md" }, { "day_id": 15, "publish_date": "2020-08-17", "name": "能不能说一说XSS攻击？", "content": "能不能说一说XSS攻击？", "type": "md" }, { "day_id": 14, "publish_date": "2020-08-16", "name": "react-router里的Link标签和a标签有什么区别？", "content": "react-router里的Link标签和a标签有什么区别？（React内容）", "type": "md" }, { "day_id": 13, "publish_date": "2020-08-15", "name": "介绍js全部数据类型，基本数据类型和引用数据类型的区别", "content": "介绍js全部数据类型，基本数据类型和引用数据类型的区别", "type": "md" }, { "day_id": 12, "publish_date": "2020-08-14", "name": "浏览器缓存机制(1)对于开发很重要，强缓存的内容能了解多少呢？", "content": "浏览器缓存机制(1)对于开发很重要，强缓存的内容能了解多少呢？", "type": "md" }, { "day_id": 11, "publish_date": "2020-08-13", "name": "webpack中source map是什么？生产环境怎么用？", "content": "webpack中source map是什么？生产环境怎么用？", "type": "md" }, { "day_id": 10, "publish_date": "2020-08-12", "name": "计算属性和普通属性的区别是什么？", "content": "vue中计算属性computer和普通属性method的区别是什么？", "type": "md" }, { "day_id": 9, "publish_date": "2020-08-11", "name": "常见的loader以及作用的总结", "content": "常见的loader以及作用的总结(webpack部分)", "type": "md" }, { "day_id": 8, "publish_date": "2020-08-10", "name": "在css中link和@import的区别是什么？", "content": "在css中link和@import的区别是什么？", "type": "md" }, { "day_id": 7, "publish_date": "2020-08-09", "name": "防抖节流原理、区别以及应用，请用js实现。", "content": "防抖节流原理、区别以及应用，请用js实现。", "type": "md" }, { "day_id": 6, "publish_date": "2020-08-08", "name": "说一下vue-router的原理是什么?", "content": "说一下vue-router的原理是什么?", "type": "md" }, { "day_id": 5, "publish_date": "2020-08-07", "name": "浏览器的本地存储(2)的WebStorage了解多少？", "content": "浏览器的本地存储(2)的WebStorage了解多少", "type": "md" }, { "day_id": 4, "publish_date": "2020-08-06", "name": "浏览器的本地存储(1)的cookie了解多少？", "content": "浏览器的本地存储(1)的cookie了解多少？", "type": "md" }, { "day_id": 3, "publish_date": "2020-08-05", "name": "请解释React中props和state的区别？", "content": "请解释React中props和state的区别？", "type": "md" }, { "day_id": 2, "publish_date": "2020-08-04", "name": "Loader和Plugin的区别是什么？", "content": "Loader和Plugin的区别是什么？(webpack部分)", "type": "md" }, { "day_id": 1, "publish_date": "2020-08-03", "name": "vue的双向绑定的原理是什么？", "content": "vue的双向绑定的原理是什么？", "type": "md" }] }


let c = ''
a.data.reverse().map(item => {
    c += item.name + '\n'
})
const fs = require('fs')
fs.writeFileSync('./b.md', c, 'utf8')