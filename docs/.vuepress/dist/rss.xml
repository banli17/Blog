<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title></title>
        <link>https://www.banli17.com</link>
        <description></description>
        <lastBuildDate>Fri, 27 Mar 2020 03:26:08 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>https://github.com/webmasterish/vuepress-plugin-feed</generator>
        <atom:link href="https://www.banli17.com/feed.atom" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[Home]]></title>
            <link>https://www.banli17.com/</link>
            <guid>https://www.banli17.com/</guid>
            <pubDate>Fri, 27 Mar 2020 03:26:07 GMT</pubDate>
            <description><![CDATA[https://www.cnblogs.com/andong2015/p/9981363.html]]></description>
        </item>
        <item>
            <title><![CDATA[算法复杂度分析]]></title>
            <link>https://www.banli17.com/algo/01_complexity.html</link>
            <guid>https://www.banli17.com/algo/01_complexity.html</guid>
            <pubDate>Fri, 27 Mar 2020 03:26:07 GMT</pubDate>
            <description><![CDATA[算法复杂度分析
时间复杂度
大 O 表示法
O(1)
O(N)
O(N^2)
O(log(n))
O(K^n)

二叉树搜索：前序、中序、后序 O(n)
图的遍历 O(n)
搜索算法: DFS、BFS O(n)
二分查找 O(logn)
归并排序： O(nlogn)

如何理解算法时间复杂度的表示法 https://www.zhihu.com/question/21387264
Master theorem http://en.wikipedia.org/wiki/Mastertheorem(analysisofalgorithms)
主定理http://zh.wikipedia.org/wiki/%E4%B8%BB%E5%AE%9A%E7%90%86
]]></description>
        </item>
        <item>
            <title><![CDATA[数组、链表、跳表]]></title>
            <link>https://www.banli17.com/algo/02_%E6%95%B0%E7%BB%84_%E9%93%BE%E8%A1%A8_%E8%B7%B3%E8%A1%A8.html</link>
            <guid>https://www.banli17.com/algo/02_%E6%95%B0%E7%BB%84_%E9%93%BE%E8%A1%A8_%E8%B7%B3%E8%A1%A8.html</guid>
            <pubDate>Fri, 27 Mar 2020 03:26:07 GMT</pubDate>
            <description><![CDATA[数组、链表、跳表
概念
Array 数组
数组的特点是开辟一段内存连续的地址，可以通过硬件内存管理器来访问，它可以保证访问某个元素的时间复杂度都是 O(1)。
数组存在的问题：

插入时后面元素都要向后移动一位 O(n)
删除时将后面的元素往前移动一位 O(n)，最后一个设置为 null，唤起内存回收机制

ArrayList 支持扩容，如果容量不够，会新建一个 2 倍大小的数组，将旧的数组拷贝过去。删除时也会移动位置。 删除、插入时间复杂度还是 O(n)。
所以 Array 时间复杂度为：
prepend    O(1)
append O(1)
lookup O(1)
insert O(n)
delete O(n)

链表出现是为了解决数组的插入和删除操作时间复杂度高的问题。它的特点是：

有头 head、尾 tail 节点。
节点有 next 指针指向下一个元素，最后一个元素的 next 指针指向 None。

时间复杂度分析：

插入: 只需要将前一个节点的 next 指向插入元素，插入元素的 next 指针指向下一个节点即可。时间复杂度是 O(1)。
删除: 前一个节点的 next 指向要删除元素的下个节点。时间复杂度是 O(1)。
查找：时间复杂度为 O(n)。

双向链表， java 里的 LinkedList
循环链表
插入节点： O(1)
删除节点: O(1)
查找节点: O(n)
prepend  O(1)
append  O(1)
lookup  O(n)
insert  O(1)
delete  O(1)

跳表：为了优化链表的缺陷（随机访问某个元素的时间太长 O(n）)。
跳表的思想是：

升维思想，多维空间
空间换时间

建立索引级别
索引的高度： logn，每层索引遍历的节点个数 3
在跳表中查询任意数据的时间复杂度就是 O(logn)
1                        第k 级索引
1       5
1   3   5   7
1 2 3 4 5 6 7 8 9

n/2 n/4 n/8 第 k 级索引节点个数是 n/(2^k)
假设索引有 h 级，最高级的索引有 2 个节点，n/(2^h) = 2 从而 h = log2(n) - 1
现实中跳表会随着增加和删除，索引跨步会改变，需要更新索引，维护索引成本高
空间复杂度
2 个节点抽 1 个 n/2 n/4 n/8 8 4 2
3 个抽一个 n/3 n/9 n/27 9 3 1
空间复杂度 O(n)
工程中的应用
LRU Cache - Linked List 146
题目
283.Move Zeroes
题目：https://leetcode-cn.com/problems/move-zeroes/

罗列解法

第一次循环将非 0 移动到前面，第二次循环后面 0
一次循环，交换位置
一次循环，将前面的值设置为当前值，当前位置设置为 0

解法1
def move_zero(nums):
    i = 0
    for l in nums:
        if l != 0:
            nums[i] = l
            i += 1
    for x in range(i, len(nums)):
        nums[x] = 0
    return nums

解法2
def move_zero(nums):
    i = 0
    for n in range(len(nums)):
        if nums[n] != 0:
            nums[n], nums[i] = nums[i], nums[n]
            i += 1
    return nums

解法3
def move_zero(nums):
    i = -1
    for n in range(len(nums)):
        if nums[n] != 0:
            i += 1
            nums[i] = nums[n]
            if (i != n):
                nums[n] = 0
    return nums

11.装最多水问题
题目：https://leetcode-cn.com/problems/container-with-most-water/

解法

暴力法，两层循环求最大值 O(n^2)，第二层循环从 i+1 开始
两边收敛(左右夹逼)法，一层循环，两个指针往里收，如果比外层高度小不用考虑，高度大才比较。

class Solution(object):
暴力法，时间太长，未通过
    def maxArea(self, height):
        oldArea = 0
        for i in range(0, len(height) - 1):
            for j in range(i + 1, len(height) - 1):
                area = min(height[j], height[i]) * (j - i)
                if area > oldArea:
                    oldArea = area
        return oldArea

收敛法
    def maxArea2(self, height):
        i = 0
        j = len(height) - 1
        r = 0
        minHeight = 0
        while i &lt; j:
            if height[i] &lt; height[j]:
                minHeight = height[i]
                i += 1
            else:
                minHeight = height[j]
                j -= 1
            area = (j - i + 1) * minHeight
            r = max(area, r)
        return r

s = Solution()
print(s.maxArea2([1,8,6,2,5,4,8,3,7]))

70.爬楼梯问题
题目：https://leetcode-cn.com/problems/climbing-stairs/

解法

暴力? 不行
找重复子问题，斐波拉契

递推法，用3个变量不断前进
class Solution(object):
    def climbStairs(self, n):
        if n &lt;= 2:
            return n
        f1, f2, f3 = 1, 2, 3
        for i in range(3, n+1):
            f3 = f1 + f2
            f1 = f2
            f2 = f3
        return f3

1.两数之和
https://leetcode-cn.com/problems/two-sum/

暴力法 两层循环

class Solution(object):
    def twoSum(self, nums, target):
        nums_len = len(nums)
        for i in range(nums_len):
            for j in range(i+1, nums_len):
                if target == nums[i] + nums[j]:
                    return [i, j]

nums = [2, 7, 11, 15]
target = 9
s = Solution()
r = s.twoSum(nums, target)
print(r)

15. 三数之和
https://leetcode-cn.com/problems/3sum/
和第1题类似， a + b = -c
解法：
- 暴力，三层循环 O(n^3)
- hash表，O(n^2)， 循环两次，去哈希表里查结果 c
- 左右夹逼 O(NlogN)，先排序，再 k i j，i j 往中间走
class Solution(object):
    def threeSum(self, nums):
        list_r = []
        nums.sort()
        for i in range(0, len(nums)):
            for j in range((i + 1), len(nums)):
                for k in range((j + 1), len(nums)):
                    if (nums[i] + nums[j] + nums[k] == 0) and ([nums[i], nums[j], nums[k]] not in list_r):
                        list_r.append([nums[i], nums[j], nums[k]])
        return list_r

    def threeSum3(self, nums):
        list_r = []
        nums.sort()
        for k in range(0, len(nums)):
            i = k + 1
            j = len(nums) - 1
            while i &lt; j:
                nums_sum = nums[k] + nums[i] + nums[j]
                if nums_sum == 0:
if [nums[i], nums[j], nums[k]] not in list_r:
                    list_r.append([nums[i], nums[j], nums[k]])
                    while(i&lt;j and nums[i]==nums[i+1]):
                        i += 1
                    while(i&lt;j and nums[j]==nums[j-1]):
                        j-=1
                    i += 1
                    j -= 1
                elif nums_sum &lt; 0:
                    i += 1
                else:
                    j -= 1
        return list_r

s = Solution()

r = s.threeSum3([-1,0,1,2,-1,-4])
print(r)

资料
课后作业

https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/
https://leetcode-cn.com/problems/rotate-array/
https://leetcode-cn.com/problems/merge-two-sorted-lists/
https://leetcode-cn.com/problems/merge-sorted-array/
https://leetcode-cn.com/problems/two-sum/
https://leetcode-cn.com/problems/move-zeroes/
https://leetcode-cn.com/problems/plus-one/

Linked List 实战题目

https://leetcode.com/problems/reverse-linked-list/
https://leetcode.com/problems/swap-nodes-in-pairs
https://leetcode.com/problems/linked-list-cycle
https://leetcode.com/problems/linked-list-cycle-ii
https://leetcode.com/problems/reverse-nodes-in-k-group/

练习题：

https://leetcode.com/problems/reverse-linked-list/ 206

方法 1 迭代法
方法 2 递归
方法 3 es6 https://leetcode.com/problems/reverse-linked-list/discuss/313728/Javascript-ES6-less-code-solution

https://leetcode.com/problems/linked-list-cycle 141

新建节点进行迭代：https://leetcode.com/problems/swap-nodes-in-pairs/discuss/284762/js-solution-faster-than-100

暴力法，循环等 1s 没相遇就没有环
将前面节点记录一下，然后查找。
快慢指针: https://leetcode.com/problems/linked-list-cycle/discuss/371507/Javascript-Solutions-(using-Set-slow-and-fast-pointers)

https://leetcode.com/problems/swap-nodes-in-pairs 24

加一个头节点，防止赋值导致节点断裂的问题

https://leetcode.com/problems/linked-list-cycle-ii
https://leetcode.com/problems/reverse-nodes-in-k-group/
]]></description>
        </item>
        <item>
            <title><![CDATA[栈、队列、优先队列、双端队列]]></title>
            <link>https://www.banli17.com/algo/03_%E6%A0%88_%E9%98%9F%E5%88%97_%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97_%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97.html</link>
            <guid>https://www.banli17.com/algo/03_%E6%A0%88_%E9%98%9F%E5%88%97_%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97_%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97.html</guid>
            <pubDate>Fri, 27 Mar 2020 03:26:07 GMT</pubDate>
            <description><![CDATA[栈、队列、优先队列、双端队列
概念
Stack 先进后出，添加，删除都是 O(1)，查询是 O(N)
Queue 先进先出，添加、删除都是 O(1)，查询是 O(N)
工程中一般用 双端队列 Deque(Double-End Queue)，头尾都可以出和入。添加删除都是 O(1)，查询是 O(N)。
工程实现
查询 Stack 等接口实现
google 搜索 stack java 12 、java source stack download/source java stack
栈的方法
class Stack{
    boolean empty()
    E       peek()   查看栈顶元素
    E       pop()
    E       push(E item)
    int     search(Object o)
}

queue 是一个接口
interface Queue{
    // 有异常会抛出异常
    add()
    remove()
    element()

    // 有异常会返回一个值
    offer(e)
    poll()
    peek()
}

优先队列 PriorityQueue
插入操作 O(1)
取出操作 O(logN) 好处: 按照元素的优先级取出
底层具体实现多种多样和复杂，可以是 heap、bst、treap
Vector 可变数组
参考链接

Java 的 PriorityQueue 文档
Java 的 Stack 源码
Java 的 Queue 源码
Python 的 heapq
高性能的 container 库

预习题目
https://leetcode-cn.com/problems/valid-parentheses/
https://leetcode-cn.com/problems/min-stack/
实战题目
https://leetcode-cn.com/problems/largest-rectangle-in-histogram
https://leetcode-cn.com/problems/sliding-window-maximum
课后作业
 用 add first 或 add last 这套新的 API 改写 Deque 的代码
 分析 Queue 和 Priority Queue 的源码
https://leetcode.com/problems/design-circular-deque
https://leetcode.com/problems/trapping-rain-water/
说明：改写代码和分析源码这两项作业，同学们需要在第 1 周的学习总结中完成。如果不熟悉 Java 语言，这两项作业可选做。]]></description>
        </item>
        <item>
            <title><![CDATA[数组]]></title>
            <link>https://www.banli17.com/algo/array.html</link>
            <guid>https://www.banli17.com/algo/array.html</guid>
            <pubDate>Fri, 27 Mar 2020 03:26:07 GMT</pubDate>
            <description><![CDATA[数组
数组在内存一般是连续存储的。
操作

获取：通过 Memory Controller(内存管理器)访问任何下标位置的元素为 O(1)。
插入: 因为要保证是连续的，所以插入后，后面的元素要往后面移动。时间复杂度是 O(n) 的。
删除: 也是 O(n) 的。
]]></description>
        </item>
        <item>
            <title><![CDATA[动态规划]]></title>
            <link>https://www.banli17.com/algo/dynamic-program.html</link>
            <guid>https://www.banli17.com/algo/dynamic-program.html</guid>
            <pubDate>Fri, 27 Mar 2020 03:26:07 GMT</pubDate>
            <description><![CDATA[动态规划

递归 + 记忆化 -&gt; 递推
状态的定义：opt[n]、dp[n]、fib[n]
状态转移(dp)方程：opt[n] = best_of(opt[n-1], opt[n-2],...)
最优子结构

DP vs 回溯 vs 贪心

回溯(递归) - 重复计算
贪心 - 永远局部最优
DP - 记录局部最优子结构/多种记录值

斐波那契数列（Fibonacci sequence）
如果直接进行递归，算法复杂度是 O(2^n)。使用递归 + 记忆法，从上向下递归计算，算法复杂度是 O(2n)。使用递推法，直接从下向上计算，算法复杂度是 O(n)。
function fib(n, c = [0, 1]) {
    if (n &lt;= 1) return c[n];

    for (let i = 2; i &lt;= n; i++) {
        c[i] = c[i - 1] + c[i - 2];
    }
    return c[n];
}

棋盘路径问题

棋盘从 start 到 end 共有多少种走法? 走动方向只能是右边或下边，中级有石头。

一个格子的走法 = 它下面格子的走法 + 它右边格子的走法。
最下面格子，和最右边格子的走法都是 1。石头格子的走法是 0。
从最右下角，开始往左上角递推。

let stone = {
    1: [2, 6],
    2: [1, 3, 4],
    3: [5],
    4: [2, 5, 7],
    5: [3],
    6: [1, 5]
};

/**
 创建格子
 @param {*} m 格子行数
 @param {*} n 格子列数
 */
function createMap(m, n) {
    let steps = [];
    for (let i = 0; i &lt;= m; i++) {
        for (let j = 0; j &lt;= n; j++) {
            if (!steps[i]) steps[i] = [];
            stepsi = i == 0 || j == 0 ? 1 : 0;
        }
    }
    return steps;
}

/**
 检测是否是石头
 */
function isStone(stone, i, j) {
    return stone &amp;&amp; stone[i] &amp;&amp; stone[i].includes(j);
}

/**
 动态规划走法
 */
function step(steps, m, n) {
    for (let i = 1; i &lt;= m; i++) {
        for (let j = 1; j &lt;= n; j++) {
            if (isStone(stone, i, j)) {
                stepsi = 0;
            } else {
                stepsi = stepsi - 1 + stepsi;
            }
        }
    }
    return steps;
}

爬楼梯问题
leetcode 70 题：楼梯一次只能爬 1 或者 2 步，第 n 层有多少种爬法。
其实就是一个斐波那契问题。
var climbStairs = function(n) {
    if (n &lt;= 2) return n;
    let all = [0, 1, 2];
    for (let i = 3; i &lt;= n; i++) {
        all[i] = all[i - 1] + all[i - 2];
    }
    return all[n];
};

三角形最小路径和
练习地址

https://github.com/banli17/practice/tree/master/algo
]]></description>
            <enclosure url="https://www.banli17.com/imgs/dynamic-program-1.png">
            </enclosure>
        </item>
        <item>
            <title><![CDATA[简介]]></title>
            <link>https://www.banli17.com/algo/</link>
            <guid>https://www.banli17.com/algo/</guid>
            <pubDate>Fri, 27 Mar 2020 03:26:07 GMT</pubDate>
            <description><![CDATA[简介
数据结构与算法是一块非常不太好学会的内容，平时工作中业务开发也不太会用到，但是它是一门非常重要的基本功。学习它没有其它好的方法，只有反复的练习，加深记忆。
学习资料

极客时间：数据结构与算法之美
极客时间：算法面试通关 40 讲

学习方法
职业训练：拆分知识点、刻意练习、反馈(学习别人、被别人指点)
切题四件套(单个题目)：

Clarification: 多看题目，反复沟通，保证理解正确
Possible solutions: 列出所有可能的解法

compare(time/space): 比较时空复杂度
optimal(加强)：找最优

Coding 多些
Test Case: 测试用例

五步刷题法：

第一遍： 5 分钟读题+思考，没思路就直接看解法：注意！多解法，比较解法优劣。背诵
第二遍: 马上自己写 -&gt; leetcode 提交；各种解法比较(执行时间)、体会 -&gt; 优化！
第三遍: 过了一天后，练习
第四遍 : 够了一周后，练习
第五遍 : 面试前，练习

误区： 不要只练习一遍
https://naotu.baidu.com/file/b832f043e2ead159d584cca4efb19703?token=7a6a56eb2630548c
https://naotu.baidu.com/file/0a53d3a5343bd86375f348b2831d3610?token=5ab1de1c90d5f3ec
编辑器、代码风格
快捷键，google 代码风格 ，自顶向下代码]]></description>
        </item>
        <item>
            <title><![CDATA[大前端笔记]]></title>
            <link>https://www.banli17.com/browser/</link>
            <guid>https://www.banli17.com/browser/</guid>
            <pubDate>Fri, 27 Mar 2020 03:26:07 GMT</pubDate>
            <description><![CDATA[大前端笔记
第一阶段
木桶理论
基础：印记中文
简历写详细，如熟悉某某原理、渲染机制]]></description>
        </item>
        <item>
            <title><![CDATA[堆和栈]]></title>
            <link>https://www.banli17.com/algo/heap-stack.html</link>
            <guid>https://www.banli17.com/algo/heap-stack.html</guid>
            <pubDate>Fri, 27 Mar 2020 03:26:07 GMT</pubDate>
            <description><![CDATA[堆和栈

stack 数组或单双链表 查 O(n) 插入，删除 O(1)
queue 数组或单双链表 查 O(n) 插入，删除 O(1)

http://www.bigocheatsheet.com/ 罗列了各种数据结构和算法时间复杂度
Big O Cheat Sheet

https://leetcode.com/problems/backspace-string-compare/description/ 844
https://leetcode.com/problems/implement-queue-using-stacks/solution/ 232
https://leetcode.com/problems/implement-stack-using-queues/description/ 225

只用栈实现队列，或只用队列实现栈
用 input 和 output，两个 stack。如果要出队，就 pop 从 output 里出、入队 push 到 input 里。output 如果没有，就将 input 里的数据移到 output，peek 用于查看末尾的元素，看 output。

https://leetcode.com/problems/valid-parentheses/description/ 20

使用栈

左 push
右 peek
最终看是否 empty

do while 循环 replace () [] {}
]]></description>
        </item>
        <item>
            <title><![CDATA[优先队列]]></title>
            <link>https://www.banli17.com/algo/priority-queue.html</link>
            <guid>https://www.banli17.com/algo/priority-queue.html</guid>
            <pubDate>Fri, 27 Mar 2020 03:26:07 GMT</pubDate>
            <description><![CDATA[优先队列
优先队列(PriorityQueue)
正常⼊、按照优先级出
实现可以是

堆

二叉堆 查找是 O(1)，删除、插入是 O(logn)，合并是 O(n)
fibonacci 堆 查、插入、合并都是 O(1)，删除是 O(logn)

二分查找树

复杂度
题目

https://leetcode.com/problems/kth-largest-element-in-a-stream
https://leetcode.com/problems/sliding-window-maximum/
]]></description>
        </item>
        <item>
            <title><![CDATA[树和图]]></title>
            <link>https://www.banli17.com/algo/tree.html</link>
            <guid>https://www.banli17.com/algo/tree.html</guid>
            <pubDate>Fri, 27 Mar 2020 03:26:07 GMT</pubDate>
            <description><![CDATA[树和图
理论
链表是特殊的树(后继节点可以多个)，树是特殊的图(可以乱指)。
二叉搜索树(binary search tree)：有序二叉树、排序二叉树，是指一棵空树或具有下列性质的二叉树：

左子树上所有节点的值都小于它的根节点的值。
右子树上所有节点的值都大于它的根节点的指。
recursively，坐、右子树也分别为二叉搜索树。

时间复杂度是O(logN)，最差是O(n)，比如只有右子节点，就是一个链表了。

验证二叉排序树
validate BST，leetcode 98 题。

in-order 中序遍历（左、根、右），应该是一个升序的 array。
递归
]]></description>
            <enclosure url="https://www.banli17.com/imgs/2019-12-23-00-39-40.png">
            </enclosure>
        </item>
        <item>
            <title><![CDATA[垃圾回收机制]]></title>
            <link>https://www.banli17.com/browser/gc.html</link>
            <guid>https://www.banli17.com/browser/gc.html</guid>
            <pubDate>Fri, 27 Mar 2020 03:26:07 GMT</pubDate>
            <description><![CDATA[垃圾回收机制]]></description>
        </item>
        <item>
            <title><![CDATA[宏观视角下的浏览器]]></title>
            <link>https://www.banli17.com/browser/macro.html</link>
            <guid>https://www.banli17.com/browser/macro.html</guid>
            <pubDate>Fri, 27 Mar 2020 03:26:07 GMT</pubDate>
            <description><![CDATA[宏观视角下的浏览器
Chrome 架构
查看 Chrome 进程情况： Chrome 又上角选项 -&gt; 更多工具 -&gt; 任务管理器。
并行处理：同一时刻处理多个任务。举例:
A = 1+1
B = 2*3
C = A*B

单线程从上到下计算，多线程同时计算 A、B，最后计算 C，性能提高了。
线程：不能单独存在，由进程来启动和管理。
进程：一个进程就是一个程序的运行实例，启动程序时，操作系统会为程序分配内存，用来存放代码、运行时数据和一个执行任务的主线程，这样的一个运行环境叫做进程。
线程依附于进程，而进程中使用多线程能并行处理提升运算效率。
关系：

进程中任意线程出错，都会导致整个进程崩溃。如 B 计算 1/0 出错。
线程之间共享进程的数据。
进程关闭后，操作系统回收所占用的内存。
进程之间的内容相互隔离。一个进程崩溃，不会影响其它进程。进程通信需要 IPC 机制。

单进程浏览器：网络、插件、js 运行环境、渲染引擎和页面都在一个进程。问题：

不稳定
不流畅
不安全：运行插件可以获取操作系统的任意资源。恶意插件可以释放病毒，盗取密码。页面脚本也可以通过浏览器漏洞获取系统权限。

多进程浏览器

解决不稳定：多进程
不流畅：js 运行在渲染进程中，即使阻塞进程，也只影响当前渲染页面，而不会影响浏览器和其它页面。
安全问题：安全沙箱，即沙箱里的程序可以运行，单不能在硬盘上写入数据，也不能读取敏感位置的数据。插件进程和渲染进程在沙箱中。
目前多进程架构

浏览器进程： 负责界面显示、用户交互、子进程管理、提供存储等功能。
渲染进程：将 html/css/js 转为用户可交互的网页，排版引擎 Blick 和 js 引擎 v8 都在该进程中，默认 Chrome 会给每个同站点页面共享一个渲染进程(process-per-site-instance，查看更多)。运行在沙箱模式下。
GPU 进程: 初衷是为了实现 3D CSS，后来网页、Chrome UI 界面都采用 GPU 来绘制。
网络进程
插件进程

多进程模型的问题：

更高的资源占用。每个进程都包含公共基础结构的副本(如 js 运行环境)。
更复杂的体系架构：浏览器各模块之间耦合性高，扩展性差。

面向未来服务的架构
2016 年,Chrome 提出了 面向服务的架构(Services Oriented Architecture，简称 SOA)。将原来各种模块重构为独立的服务，每个服务都可以在独立的进程中运行，访问服务必须使用定义好的接口，通过 IPC 通信，从而构建一个更内聚、松耦合、易于维护和扩展的系统。

同时，如果资源受限制的设备上，Chrome 会整合服务到一个进程中，节省内存。

v8 官网
chrome 设计文档

TCP 协议
FP(first paint): 从页面加载到首次开始绘制的时长。这个指标直接影响用户跳出率。
大数据拆成小数据包来传输。数据包从 A 到 B 传输过程：

ip: 数据包要在互联网传输，就要符合网际协议(internet protocol, ip)标准。
数据包交给网络层，网络层给数据包附加 ip 头， 包括 ip 版本， 源 ip ，目标 ip，生存时间。
通过物理网络传输给 B。
B 网络层拆开数据包 ip 头，将数据交给应用层。

ip 将数据包发给指定的电脑。
UDP（user datagram protocol) 用户数据包协议，通过端口号将数据给指定程序。
UDP 可以校验数据是否正确，但是对错误的包，不提供重发机制，不知道数据是否到达 B，也不能重组包。传输速度快，适合在线视频，互动游戏。
但是有些数据需要安全的到达，所以有了 TCP。
TCP: transmission control protocol，传输控制协议，面向连接、可靠的、基于字节流的传输层协议。
特点：

对于数据包丢失，重传机制
数据包排序机制，将乱序数据包重组为完整的包

完整的 TCP 生命周期：

连接三次握手 时序图
传输数据
断开：四次挥手

HTTP 请求流程
浏览器发起 http 请求过程：

构建请求： 构建请求头信息

GET /index.html HTTP1.1

查找缓存：有缓存则直接返回该资源的副本，并直接结束请求。好处：减少服务器压力，提升资源加载速度。
缓存查找失败，开始网络请求。
为数据传输准备 ip 和端口。

DNS (domain name system)将 url 映射成 ip。
有 DNS 数据缓存服务
得到 ip
根据 url 得到端口号，默认 80

等待 TCP 队列，chrome 默认同一个域名最多 6 个 TCP 连接。如果小于 6 则建立 TCP 连接。
建立 TCP 连接。
TCP 传输数据，即发送 HTTP 请求，包括请求方法、url，http 版本、请求头、请求体(post)。http 请求报文格式：

服务器处理 HTTP 请求，返回响应，包括协议版本、状态码、服务器信息等。

断开连接：一旦服务器返回请求数据，就要关闭 TCP 连接，不过可以在头信息中加入 Connection: Keep-Alive 保持连接复用 TCP，这样可以省去下次连接的开销。
重定向，如果状态码是 301 ，就是告诉浏览器要重定向，浏览器获取响应头的 Location，重新导航这个地址。

为什么很多站点第二次打开速度会很快？
因为有缓存: DNS 缓存，页面缓存。
缓存查找过程：
服务器返回 http 响应给浏览器，浏览器通过响应头 Cache-Control 设置是否缓存资源，时长通过 Cache-Control 里的 Max-age 设置。
Cache-Control: Max-age=2000

如果缓存资源未过期，则直接返回，如果过期了，则发起网络请求，并在 HTTP 请求头带上
If-None-Match:&quot;4f80f-13c-3a1xb12a&quot;

服务器收到后，会根据 If-None-Match 值判断请求的资源是否有更新。
没更新就返回 304，表示该缓存可以继续用。
有更新就返回资源给浏览器。
登录状态如何保持？
用户 post 账户密码
服务器返回头 Set-Cookie: UID=3431uad;给浏览器。
浏览器会保存到本地，再次访问时，会将Cookie: UID=3431uad;发送给服务器。
服务器根据 Cookie 判断用户是否登录。
disk：新 tab 打开时，都是 disk；html 文件都是 disk
memory：新 tab 再次使用缓存时，是 memory
完整的示意图

http 请求的 8 个阶段: 构建请求、查找缓存、准备 IP 和端口、发起 TCP 连接、发送 HTTP 请求、服务器处理请求、服务器返回请求和端口连接。
如果一个页面的网络加载时间过久，你是如何分析卡在哪个阶段的?
https://developers.google.com/web/tools/chrome-devtools/network/reference#timing-explanation 举个例子 Content Download 如果太长，很有可能是下载的资源太大，但也有可能是网络慢导致的下载太慢，简单计算一下，在例如 Waiting (TTFB) 这个太长的话，有可能是网络慢，或者就是 后端处理时间过长导致的，至少可以排查掉前端原因，还有很多，例如 DNS lookup 等，但是最终要确认具体哪里慢，最好是结合系统日志去分析
导航流程
从输入 URL 到页面展示，这中间发生了什么？

浏览器进程收到用户输入的 URL 请求，将该 URL 转发给网络进程。
网络进程发起 URL 请求。
网络进程收到响应头数据，解析并将数据转发给浏览器进程。
浏览器进程收到网络进程的响应头数据后，发送提交导航(CommitNavigation)消息(会携带响应头等基本信息)到渲染进程。
渲染进程收到消息后，开始准备接收 HTML 数据，接收方式是直接和网络进程建立数据管道。
渲染进程向浏览器进程确认提交，告诉浏览器已经准备好接收和解析数据。
浏览器进程收到渲染进程提交文档的消息后，移除之前旧文档，更新浏览器进程中的页面状态。

其中，用户发起 url 请求到页面开始解析的过程，叫做导航。

用户输入

输入搜索内容: 和浏览器默认搜索引擎合成 URL。
输入请求 URL: 加协议等，合成完整的 URL。

回车

清理旧页面， beforeunload 事件可以做数据清理或询问用户是否要离开。
标签页图标变成加载状态，页面还是之前的页面，需要等提交文档阶段，页面内容才会替换。

URL 请求过程

浏览器进程通过 IPC 把 URL 发给网络进程

网络进程查找缓存，有则直接返回，没有则网络请求(DNS 解析，如果是 HTTPS 还要建立 TLS)

利用 IP 和服务器建立 TCP 连接，浏览器端构建请求行、请求头等信息，发给服务器

服务器收到后，生成响应数据，发给网络进程，网络进程收到响应行和响应头开始解析

处理状态码

重定向： 301 或 302，读 Location，重新导航请求
200 浏览器继续处理请求

处理响应类型

Content-Type: 响应体数据是什么类型

application/octet-stream: 字节流，按下载类型处理，同时该 url 请求导航流程结束
text/html: 继续导航

准备渲染进程：

每个标签对应一个渲染进程（左键点击才算，右键新开会新开渲染进程)
同一站点(same-site)： 根域名、协议相同。新页面会复用父页面的渲染进程,process-per-site-instance。
使用 noopener noreferrer 就是告诉浏览器，新打开的子窗口不需要访问父窗口的任何内容，这是为了防止一些钓鱼网站窃取父窗口的信息。会新开渲染进程

提交文档，浏览器进程将网络进程数据交给渲染进程

浏览器进程收到网络进程的响应头数据后，向渲染进程发起提交文档的消息。
渲染进程收到消息，会和网络进程建立传输数据的管道。
数据传输完成，渲染进程返回确认提交消息给浏览器进程。
浏览器进程收到消息，更新浏览器界面状态，包括安全状态、地址栏 URL、前进后退的历史状态，并更新 web 页面。

渲染阶段：渲染进程开始页面解析和子资源加载

渲染流程

深入了解现代 Web 浏览器（第 1 部分）

openId omvMN5KyrfvTDD0iQGbhY8M_sZmg
userInfo {&quot;nickName&quot;:&quot;板栗&quot;,&quot;gender&quot;:1,&quot;language&quot;:&quot;zhCN&quot;,&quot;city&quot;:&quot;Qianjiang&quot;,&quot;province&quot;:&quot;Hubei&quot;,&quot;country&quot;:&quot;China&quot;,&quot;avatarUrl&quot;:&quot;https://wx.qlogo.cn/mmopen/vi32/DYAIOgq83epCVsZFRYQ0yGjw5HMorkBJFbub7RwatYdSYS6W0MWsmACPfSrZlUVfic6ibBRtNbG5Gd3IsAZk7F9Q/132&quot;}]]></description>
            <enclosure url="https://www.banli17.com/imgs/1-1-0.png">
            </enclosure>
        </item>
        <item>
            <title><![CDATA[v8 工作原理]]></title>
            <link>https://www.banli17.com/browser/v8.html</link>
            <guid>https://www.banli17.com/browser/v8.html</guid>
            <pubDate>Fri, 27 Mar 2020 03:26:07 GMT</pubDate>
            <description><![CDATA[v8 工作原理
垃圾回收
栈中的垃圾回收
执行栈中有一个记录当前执行状态的指针（ESP)，指向栈顶的函数执行上下文，函数执行完成后，ESP 会下移，函数执行上下文就是无效内存了，如果调用新函数，这块内存会被覆盖掉，用来存放新函数的执行上下文。
所以说，当一个函数执行完后，JS 引擎会通过向下移动 ESP 来销毁该函数保存在栈中的执行上下文。
堆中的垃圾回收
堆中的垃圾回收，就用到了 JS 的垃圾回收器。
代际假说有两个特点：

大部分对象在内存中存在的时间很短。
不死的对象，会存活的更久。

V8 将堆分为新生代和老生代两个区域，新生代存放生存时间短的对象，老生代存放生存时间长的对象。
新生区通常只支持 1-8M 容量，老生区支持的容量大。V8 分别堆这两个区使用了不同的垃圾回收器。

副垃圾回收器，负责新生代的垃圾回收。
主垃圾回收器，负责老生代的垃圾回收。

垃圾回收器工作流程
垃圾回收器的工作流程是一致的：

标记空间中活动对象和非活动对象。
回收非活动对象所占用的内存。即清理标记为非活动对象的内存。
内存整理，通常垃圾回收后，内存会变得不连续，有内存碎片。

副垃圾回收器
副垃圾回收器主要负责新生区的垃圾回收，通常小的对象分配到这里。
新生代中用 Scavenge 算法来处理，即把新生区对半分为两个区域，一般是对象区域，一半是空闲区域。新加入的对象会存放在对象区域，当对象区域快满时，就需要一次垃圾回收。
垃圾回收过程中，首先标记对象区域中的垃圾，标记完成后，进行垃圾清理阶段，副垃圾回收器会把存活的对象复制到空闲区域，同时将它们有序的排列起来，所以这个复制过程相当于是内存整理。
复制完成后，对象区域和空闲区域进行反转，这种角色反转的操作能让新生代的两块内存可以无限重复使用下去。
因为 Scavenge 算法，每次要复制存活对象到空闲区域，复制需要时间成本，所以如果新生区空间太大，每次清理需要很长时间，为了执行效率，新生区会设置的比较小。
但是由于新生区空间不大，会很快被装满，所以 JS 引擎采用对象晋升策略，即经过两次垃圾回收还存活的对象，会被移动到老生区中。
主垃圾回收器
主垃圾回收器负责老生区的垃圾回收，除了新生区晋升的对象，一些大的对象也会直接分配到老生区，所以老生区中的对象有两个特点：占用空间大、存活时间长。
如果使用 Scavenge 算法，复制大对象会花很长时间，同时还会浪费一半的空间。所以主垃圾回收器采用的是标记-清除(Mark-Sweep)算法。

标记过程，从根元素开始，进行递归遍历，能到达的元素就标记为活动对象，没有到达的就是垃圾数据。
垃圾清除

但是上面的标记-清除算法，如果多次执行后，会有大量的内存碎片，会导致大对象无法分配到足够的连续内存。所以有产生了一个新的算法标记-整理(Mark-Compact)，是直接将活动对象从开始进行排列，然后将边界后面的内存一次清空。
全停顿
JS 是运行在主线程上的，一旦执行垃圾回收算法，JS 脚本会停止执行，等待垃圾回收完毕后再恢复执行，这种行为叫做全停顿(Stop-The-World)。
如果堆中数据 1.5G，V8 清理垃圾的时间会超过 1s。这样会让应用的性能和响应能力下降。新生代小，影响不大，但是老生代就不能这样了，所以为了降低卡顿，V8 将标记过程分为一个个子标记过程，同时让垃圾回收标记和 JS 应用逻辑交替执行，直到标记阶段完成，这个算法叫增量标记算法(Incremental Marking)。
新生代和老生代的标记过程是同一过程，之后新生代把存活的数据移动到空闲区，老生代把死去的对象加到空闲列表中。
V8 还维护了一个空闲列表，也就是没有被使用的空闲空间列表，垃圾清理过程就是把没有标记的添加到空闲列表中！
增量标记会受到中间穿插的 js 应用逻辑影响么？会造成标记结果不全或者错误么？
不全没关系，新产生的垃圾下次再回收，分配内存使用空闲列表里面的。
怎么看内存泄露

一般是感官上的长时间运行页面卡顿，猜可能会有内存泄漏。
使用 chrome 的 Performance 面板，观察内存变化 如何多次垃圾回收后，整体趋势是向上，就存在内部泄漏的可能！
确定不使用的临时变量置为 null，当前 es6 普及场景下少使用闭包也是一种方法。

可能导致内存泄露

全局变量过大
定时器没有清除
闭包
DOM 引用
]]></description>
        </item>
        <item>
            <title><![CDATA[css 常用]]></title>
            <link>https://www.banli17.com/css/</link>
            <guid>https://www.banli17.com/css/</guid>
            <pubDate>Fri, 27 Mar 2020 03:26:08 GMT</pubDate>
            <description><![CDATA[css 常用
滚动条样式
::-webkit-scrollbar {
    display: none;
}
]]></description>
        </item>
        <item>
            <title><![CDATA[兼容性问题]]></title>
            <link>https://www.banli17.com/css/compatible.html</link>
            <guid>https://www.banli17.com/css/compatible.html</guid>
            <pubDate>Fri, 27 Mar 2020 03:26:08 GMT</pubDate>
            <description><![CDATA[兼容性问题
line-height android 不居中
https://www.zhihu.com/question/39516424
css reset
http://meyerweb.com/eric/tools/css/reset/
多行文字显示几行
文本超出 ...，只是 firefox 上文字会被截断。
.box {
    white-space: nowrap;
    text-overflow: ellipsis;
    -o-text-overflow: ellipsis;
    overflow: hidden;
}

.box(@n) {
    display: -webkit-box;
    -webkit-line-clamp: @n;
    -webkit-box-orient: vertical;
    overflow: hidden;
}

关于文字内容溢出用点点点(…)省略号表示

滚动条隐藏
&amp;::-webkit-scrollbar {
    display: none;
}

vivo banner 没有显示，加个 width:100% 可以
iphone 6p 10 系统，卡片商品名称内容不显示，
]]></description>
        </item>
        <item>
            <title><![CDATA[less 总结]]></title>
            <link>https://www.banli17.com/css/less.html</link>
            <guid>https://www.banli17.com/css/less.html</guid>
            <pubDate>Fri, 27 Mar 2020 03:26:08 GMT</pubDate>
            <description><![CDATA[less 文档阅读总结
总览
less 的概念包括：

变量 (Variables)

常规使用
可变插值： 在选择器名、属性名、url、@import 里使用
将属性当作变量 $props
当作变量使用 @@

父选择器 (Parent Selector)

&amp; 是所有父级的引用
可以多个&amp;
逗号选择器组合爆炸

扩展 (Extend)
合并 (Merge)
混合 (Minxins)
CSS 守卫 (CSS Guards)
分离规则集(detached ruleset)
@import 规则
@plugin 规则
映射 (Maps)

注释
/* 我是被编译的，会保留 */
// 不会被保留

变量
总览
@color-default: red;
@color-draken: darken(@color-default, 10%); // less 函数 darken

.box {
    color: @color-default;
}

可变插值
可以在选择器名称、属性名、URL 和@import 里使用。
// 1. 选择器
@my-selector: banner;
.@{my-selector} {
}
// 编译为
.banner {
}

// 2.路径
@imgs: "../img";
body {
    background: url("@{imgs}/1.png");
}

@themes: "../src/theme";
@import "@{themes}/a.less";

// 3.属性名
@property: color;
.widget {
    @{property}: red;
}

可变变量
使用另一个变量定义变量的名称。
@primary: green;
.section {
    @color: primary;
    .element {
        color: @@color;
    }
}

// 编译后
.section .element {
    color: green;
}

懒声明
变量不需要在使用前声明。
// 1
.lazy-eval {
    width: @var;
}

@var: @a;
@a: 9%;

// 2
.lazy-eval {
    width: @var;
    @a: 9%;
}

@var: @a;
@a: 100%;

// 都编译为， 有作用域概念，由 css 定义的最后一个属性确定
.lazy-eval {
    width: 9%;
}

将属性当作变量
使用 $prop 语法将属性当作变量。
.a {
    color: red;
    background: $color;
}

默认变量
// library
@base-color: green;
@dark-color: darken(@base-color, 10%);

// use of library
@import "library.less";
@base-color: red; // 会覆盖前面的变量

父选择器
通过 &amp; 可以引用父选择器。
.button {
    &amp;:hover {
        // .button:hover
    }
    &amp;-ok {
        // .button-ok
    }
    &amp;-cancel {
    }
    &amp; &amp; {
        // .button .button
    }
    &amp; + &amp; {
        // .button + .button
    }
    &amp;&amp; {
        .button.button;
    }
    &amp;,
    &amp;ish {
        .button, .buttonish;
    }
}

&amp; 表示所有的父元素，而不是最近的一个。
.grand {
    .parent {
        &amp; > &amp; {
            color: red;
        }
    }
}
// 编译后
.grand .parent > .grand .parent {
    color: red;
}

更改选择器顺序
.a {
    .b {
        .c &amp; {
            color: red;
        }
    }
}
// 编译后
.c .a .b {
    color: red;
}

组合爆炸
会给逗号分割列表列出所有可能。
p,
a {
    &amp; + &amp; {
        color: red;
    }
}
// 编译后
p + p
p + a
a + p
a + a

扩展(Extend)
它将合并的选择器和其引用的选择器合并。
nav ul {
    &amp;:extend(.inline);
    color: red;
}
.inline {
    background: blue;
}
// 编译后
nav ul {
    color: red;
}
.inline,
nav ul {
    color: red;
}

混合
// 混合
.border {
    border: 1px solid red;
}
.box {
    color: @color-default;
    .border;
}

// 混合 - 可带参数
.border02(@borderwidth) {
    border: solid yellow @border_width;
}

.test {
    .border_02(30px);
}

// 混合 - 默认带值
.border03(@borderwidth:10px) {
    border: solid yellow @border_width;
}

.text {
    .border_03();
}

// 混合的例子
.border_radius(@radius: 5px) {
    -webkit-border-radius: @radius;
    -ms-border-radius: @radius;
    border-radius: @radius;
}

匹配模式
// 普通
.sanjiao {
    width: 0;
    height: 0;
    overflow: hidden;

    border-width: 10px;
    border-color: red transparent transparent transparent; // 朝下
    border-style: solid; // ie不兼容，需要改成 solid dashed dashed dashed
}

// 匹配模式
.triangle(top, @w:5px, @c:#ccc) {
    border-width: @w;
    border-color: transparent transparent @c transparent;
    border-style: dashed dashed solid dashed;
}
.triangle(bottom, @w:5px, @c:#ccc) {
    border-width: @w;
    border-color: @c transparent transparent transparent;
    border-style: solid dashed dashed dashed;
}
.triangle(@_, @w:5px, @c:#ccc) {
    // 默认带上这个
    width: 0;
    height: 0;
    overflow: hidden;
}
.sanjiao {
    .triangle(bottom, 100px);
}

// 匹配模式 - 定位
.pos(r) {
    position: relative;
}
.pos(f) {
    position: fixed;
}
.pos(a) {
    position: absolute;
}
.pipe {
    .pos(f);
}

运算
@test: 100px;
.box {
    width: @test -10 * 2;
}

嵌套规则
.list {
    ul {
        li {
            a {
                color: red;
            }
        }
    }
}

// &amp; 表示上一层选择器
a {
    &amp;:hover {
        // 表示 a:hover
        color: red;
    }
}

// .title
//.titlenav 可以写成 &amp;nav

arguments
.border(@w:20px,@c:red,@type:solid) {
    border: @arguments;
}

避免编译
.test {
    width: ~"calc(300px -10px)";
    // calc 是浏览器计算的，而不是css
}

important
.test {
    .border() !important; // 里面所有的元素都会加 !important
}

css 重构规范

供 js 使用，非样式类，使用js-前缀。

&lt;a href=&quot;/login&quot; class=&quot;js-login&quot;&gt;&lt;/a&gt;

工具类 Utilities，必须使用驼峰命名，前缀使用u-，比如 floats, containing floats, vertical alignment, text truncation，clearfix 等。可以跟组件类一起使用。

&lt;div class=&quot;u-clearfix&quot;&gt;
	&lt;div class=&quot;u-pullLeft&quot;&gt;&lt;/div&gt;
&lt;/div&gt;

组件 components，比如按钮，模态框等。

// 样式类组件
.btn {}
.btn--default{}

// 功能类组件
.modal {}
.modal-header {}
.modal-body {}

// 状态类组件修饰，需要组合使用，比如.modal.is-big
.modal {}
.is-big {}

变量，命名规范是属性-值--组件名，比如

@color-grayLight-highlightMenu: rgb(51, 51, 50)

颜色，规定使用 colors.less，颜色的值优先使用 rgb 或 rgba 格式，后使用 16 进制或 hsl 或英语单词。

z-index 范围，使用z-index.less文件。

@zIndex-1: 100
@zIndex-2: 200
@zIndex-3: 200
...
@zIndex-9: 900

字体粗细，参考 type.less 类型的大小，字母间距和行高。原尺寸，空格和线的高度应避免出现在 type.less 之外。

N = normal
I = italic
4 = normal font-weight
7 = bold font-weight

@fontSize-micro
@fontSize-smallest
@fontSize-smaller
@fontSize-small
@fontSize-base
@fontSize-large
@fontSize-larger
@fontSize-largest
@fontSize-jumbo

行高

@lineHeight-tightest
@lineHeight-tighter
@lineHeight-tight
@lineHeight-baseSans
@lineHeight-base
@lineHeight-loose
@lineHeight-looser

文字间隔

@letterSpacing-tightest
@letterSpacing-tighter
@letterSpacing-tight
@letterSpacing-normal
@letterSpacing-loose
@letterSpacing-looser

多个 css 选择器用逗号分隔，并换行。

.content,
.content-edit {
  …
}

css 块之间只有一个新行，不能有多余空行。

// ok
.content {
  …
}
.content-edit {
  …
}

// bad
.content {
  …
}

.content-edit {
  …
}

引号使用双引号

background-image: url(&quot;/img/you.jpg&quot;);
font-family: &quot;Helvetica Neue Light&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial;

优化选择器性能

// ok
.user-list &gt; a:hover {
  color: red;
}

// ok
.user-list &gt; .link-primary:hover {
  color: red;
}

// bad  太长了
ul.user-list li span a:hover { color: red; }

参考

http://lesscss.org/features/#variables-feature
]]></description>
        </item>
        <item>
            <title><![CDATA[let 和 const]]></title>
            <link>https://www.banli17.com/es6/let_const.html</link>
            <guid>https://www.banli17.com/es6/let_const.html</guid>
            <pubDate>Fri, 27 Mar 2020 03:26:08 GMT</pubDate>
            <description><![CDATA[ES6 系列之 let 和 const
var 的问题

变量提升
循环问题

for (var i = 0; i &lt; 2; i++) {
    div[i].onClick = function() {
        console.log(i);
    };
}
console.log(i); // 2

所以 es6 引入了块级作用域。存在于：函数内部、{} 中。
let 和 const

不会被提升，在声明前使用会报错
重复声明报错
不绑定全局作用域，即不会挂载到 window 上
const 不能修改绑定，但允许修改值(对象时)

临时死区
临时死区(Temporal Dead Zone)，简称 TDZ。
let 和 const 声明的变量不会提升到作用域顶部，在声明前访问会报错。
js 引擎在扫描变量时，会将 var 声明提前，let 和 const 放在 TDZ 中，在访问 TDZ 中变量会发生错误，只有执行过变量声明语句后，变量才会从 TDZ 中移出，才可以访问。
{
    console.log(a); // 报错，a 还在 TDZ 中
    let a = 1; // a 从 TDZ 中移出
}

循环
for (let i = 0; i &lt; 3; i++) {
    div[i].onClick = function() {
        console.log(i);
    };
}

上面是 重复定义 i? 应该报错？ let 声明在循环内行为在标准中专门定义的。
let 会创建一个隐藏的作用域。每次迭代会创建一个新变量，并将之前同名变量的值赋值给新变量进行初始化。
如果用 const 会报错，因为在循环中 const a = 0; 之后尝试赋新值初始化。
for in 循环也是一样的，用 let 会创建新的绑定。
for (let i in o) {
    div[i].onClick = function() {
        console.log(i);
    };
}

Babel 编译 let 和 const
// example 1
let value = 1;
// 编译后
var value = 1;

// example 2
if (false) {
    let value = 1;
}
// 编译后
if (false) {
    var _value = 1;
}

// example 3
let value = 1;
{
    let value = 2;
}
value = 3;
// 编译后
var value = 1;
{
    var _value = 2;
}
value = 3;

// example 4
var funcs = [];
for (let i = 0; i &lt; 10; i++) {
    funcs[i] = function() {
        console.log(i);
    };
}
// 编译后
var funcs = [];

var loop = function loop(i) {
    funcs[i] = function() {
        console.log(i);
    };
};

for (var i = 0; i &lt; 10; i++) {
    _loop(i);
}

// example 5
for (let i = 0; i &lt; 3; i++) {
    let i = "abc";
    console.log(i); // 输出 3 次 abc，上面两个 i是不同的
}
// 编译后，因为没有必要为 i 新建作用域
for (var i = 0; i &lt; 3; i++) {
    var _i = "abc";
    console.log(_i); // 输出 3 次 abc，上面两个 i是不同的
}

总结

var 的问题： 挂载全局，提升，多次声明覆盖，循环问题
什么是临时死区? let const 声明的变量会进入临时死区，代码执行后才可访问。
let 循环的过程中如何执行？声明新变量，赋予旧值。所以 const 会报错，因为要赋值。
babel 如何编译 let const？

babel 在线编译工具
]]></description>
        </item>
        <item>
            <title><![CDATA[css 揭秘]]></title>
            <link>https://www.banli17.com/css/css-secret.html</link>
            <guid>https://www.banli17.com/css/css-secret.html</guid>
            <pubDate>Fri, 27 Mar 2020 03:26:08 GMT</pubDate>
            <description><![CDATA[css 揭秘
1. 透明边框
背景实际会从边框处开始渲染，所以如果 border rgba 会有问题。
解决方法是 background-clip:padding-box
2. 多边框
方案 1: box-shadow: 右 下 模糊 扩展 色。
注意： 阴影不影响盒子渲染，阴影无法触发盒子鼠标事件。可以通过 inset 解决。
方案 2: outline 适合 2 层边框，+border，而且支持 dashed。
而且可以通过 outline-offset 调整位置，支持负数。
3. 灵活的背景定位
图片要定位到有下角。
background-position: right 20px bottom 20px;
还一种方法是 calc，计算到左上角的距离。
calc(100% - 20px) 注意空格
background-position 默认是从 padding-box 定位的，可以通过 background-origin 修改。
4. 边框内圆角
outline 不会跟着 border-radius 走，box-shadow 会。
所以用 box-shadow 来填满空隙。所以如果边框小于空隙处半径，则无法实现
5. 条纹背景]]></description>
        </item>
        <item>
            <title><![CDATA[简介]]></title>
            <link>https://www.banli17.com/es6/</link>
            <guid>https://www.banli17.com/es6/</guid>
            <pubDate>Fri, 27 Mar 2020 03:26:08 GMT</pubDate>
            <description><![CDATA[简介
jQuery 2.0.3 源码分析
参考资料

jQuery 2.0.3 源码分析系列
]]></description>
        </item>
    </channel>
</rss>