(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{290:function(e,a,t){"use strict";t.r(a);var s=t(0),r=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"了解-babel-的使用和原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#了解-babel-的使用和原理","aria-hidden":"true"}},[e._v("#")]),e._v(" 了解 babel 的使用和原理")]),e._v(" "),t("p",[e._v("babel 是用来将高版本的 js 编译成低版本 js 的工具。")]),e._v(" "),t("p",[e._v("首先安装"),t("code",[e._v("babel-cli")]),e._v("、"),t("code",[e._v("babel-preset-env")]),e._v("。")]),e._v(" "),t("p",[e._v("然后新建一个"),t("code",[e._v(".babelrc")]),e._v("文件，添加配置。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// .babelrc\n{\n    presets: ['env']\n}\n")])])]),t("ul",[t("li",[e._v("babel-cli: babel 的命令行工具")])]),e._v(" "),t("p",[e._v("如果不配置"),t("code",[e._v(".babelrc")]),e._v("文件，直接使用"),t("code",[e._v("babel 1.js -o 2.js")]),e._v("，将会原样输出。\n"),t("code",[e._v("-o")]),e._v(" 是 "),t("code",[e._v("--out-file")]),e._v("的简写，是输出编译结果到单个文件。\n如果想每次修改文件后编译文件，加"),t("code",[e._v("--watch")]),e._v("或"),t("code",[e._v("-w")]),e._v("，"),t("code",[e._v("-w")]),e._v("要在"),t("code",[e._v("-o")]),e._v("之前写，否则报错文件不存在。")]),e._v(" "),t("p",[t("code",[e._v("babel src/*.js -w -o *.js")]),e._v("将会把 js 文件合并到一个 js 输出，这个 js 的名字是第一个 js 的名字。")]),e._v(" "),t("p",[t("code",[e._v("--source-maps")]),e._v("或"),t("code",[e._v("-s")]),e._v("表示添加 source map 文件。如果要内联，则是"),t("code",[e._v("-source-maps inline")]),e._v("，会生成一个.js.map 文件。")]),e._v(" "),t("p",[t("code",[e._v("--out-dir")]),e._v("或"),t("code",[e._v("-d")]),e._v("可以将整个 src 目录编译输出到 lib 目录。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 正确\nbabel src -d build   // 编译整个目录到build目录\nbabel src -d build.js   // 编译整个目录到build.js\n\n// 错误，会生成 build/src...\nbabel src/*.js -d build\n")])])]),t("p",[e._v("忽略文件 "),t("code",[e._v("--ignore spec.js,text.js")])]),e._v(" "),t("p",[e._v("复制不需要编译的文件 "),t("code",[e._v("--copy-files")])]),e._v(" "),t("p",[e._v("传输文件 "),t("code",[e._v("babel -o 1.js < 2.js")])]),e._v(" "),t("p",[e._v("使用插件 "),t("code",[e._v("--plugins=transform-runtime,transform-es2015-modules-amd")])]),e._v(" "),t("p",[e._v("使用 presets "),t("code",[e._v("--presets=es2015,react")])]),e._v(" "),t("p",[e._v("忽略.babelrc 文件的配置并使用 cli 选项")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("babel --no-babelrc script.js --out-file script-compiled.js --presets=es2015,react\n")])])]),t("h2",{attrs:{id:"babel-register"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#babel-register","aria-hidden":"true"}},[e._v("#")]),e._v(" babel-register")]),e._v(" "),t("p",[e._v("babel-register 模块改写 require 命令，为它加上一个钩子。此后，每当使用 require 加载.js、.jsx、.es 和.es6 后缀名的文件，就会先用 Babel 进行转码。")]),e._v(" "),t("p",[e._v("使用时，必须首先加载 babel-register。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('require("babel-register");\nrequire("./index.js");\n')])])]),t("p",[e._v("然后，就不需要手动对 index.js 转码了。")]),e._v(" "),t("p",[e._v("需要注意的是，"),t("code",[e._v("babel-register")]),e._v("只会对 require 命令加载的文件转码，而不会对当前文件转码。另外，由于它是实时转码，所以只适合在开发环境使用。")]),e._v(" "),t("p",[e._v("不过现在"),t("code",[e._v("node8")]),e._v("都已经支持"),t("code",[e._v("es6")]),e._v("语法了，所以不太需要这货。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('function loader(m, filename) {\n  m._compile(compile(filename), filename);\n}\n\nfunction registerExtension(ext) {\n  var old = oldHandlers[ext] || oldHandlers[".js"] || require.extensions[".js"];\n\n  require.extensions[ext] = function (m, filename) {\n    if (shouldIgnore(filename)) {\n      old(m, filename);\n    } else {\n      loader(m, filename, old);\n    }\n  };\n}\n')])])]),t("p",[e._v("通过定义 require.extensions 方法，可以覆盖 require 方法，这样调用 require 的时候，就可以走 babel 的编译，然后使用 m._compile 方法运行代码。")]),e._v(" "),t("h2",{attrs:{id:"babel-node"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#babel-node","aria-hidden":"true"}},[e._v("#")]),e._v(" babel-node")]),e._v(" "),t("p",[t("code",[e._v("babel-node")]),e._v("可以直接形成一个支持 es6 语法的 node 环境，在开发环境中执行代码时可以用它来代替 node。")]),e._v(" "),t("h2",{attrs:{id:"babel-core"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#babel-core","aria-hidden":"true"}},[e._v("#")]),e._v(" babel-core")]),e._v(" "),t("p",[t("code",[e._v("babel-core")]),e._v("是以编程的方式使用 babel,可以用来将某段代码或某个文件转换成一个对象"),t("code",[e._v("{code, map, ast}")]),e._v("。")]),e._v(" "),t("p",[t("code",[e._v("ast")]),e._v("表示 "),t("a",{attrs:{href:"http://www.iteye.com/news/30731",target:"_blank",rel:"noopener noreferrer"}},[e._v("Abstract Syntax Tree"),t("OutboundLink")],1),e._v("。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var babel = require('babel-core');\n\nvar obj = babel.transform('()=>{}', {\n\tsourceMaps: true,\n\tpresets: ['env']\n});\n\nconsole.log(obj);  // {code, map, ast}\n")])])]),t("ul",[t("li",[e._v('babel.transformFile("filename.js", options)')]),e._v(" "),t("li",[e._v('babel.transformFileSync("filename.js", options)')]),e._v(" "),t("li",[e._v("babel.transformFromAst(ast: Object, code?: string, options?: Object)")])]),e._v(" "),t("h2",{attrs:{id:"配置-babel"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置-babel","aria-hidden":"true"}},[e._v("#")]),e._v(" 配置 Babel")]),e._v(" "),t("p",[e._v("要使用 babel，需要通过"),t("code",[e._v("presets")]),e._v("和"),t("code",[e._v("plugins")]),e._v("来告诉 babel 做什么。")]),e._v(" "),t("p",[t("strong",[e._v(".babelrc")])]),e._v(" "),t("ul",[t("li",[e._v("babel-preset-es2015")]),e._v(" "),t("li",[e._v("babel-preset-react 转义 react 语法")]),e._v(" "),t("li",[e._v("babel-preset-stage-x\n"),t("ul",[t("li",[e._v("0 提议")]),e._v(" "),t("li",[e._v("1 草稿")]),e._v(" "),t("li",[e._v("2 定稿")]),e._v(" "),t("li",[e._v("3 浏览器实验。如果可以，下一年就发布")])])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n    "presets": [\n      "es2015",\n      "react",\n      "stage-2"\n    ],\n    "plugins": []\n}\n')])])]),t("p",[e._v("babel 可以编译所有的新语法，但是 API 不能保证。")]),e._v(" "),t("p",[t("code",[e._v("babel-polyfill")]),e._v("用来将新 API，比如做一个"),t("code",[e._v("Array.from")]),e._v("垫片。babel 的垫片库是"),t("a",{attrs:{href:"https://github.com/zloirock/core-js",target:"_blank",rel:"noopener noreferrer"}},[e._v("core-js"),t("OutboundLink")],1),e._v("。要使用它，只需要在文件顶部加入"),t("code",[e._v('import "babel-polyfill"')]),e._v("即可。")]),e._v(" "),t("ul",[t("li",[e._v("babel 默认会将新语法比如 class 转成函数_classCallCheck，但是每个模块文件都会新生成一遍。通过启用"),t("code",[e._v("babel-plugin-transform-runtime")]),e._v("可以在转化时 require 调用"),t("code",[e._v("babel-runtime")]),e._v("里面的方法，达到复用。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// 提取出来是依赖babel-runtime的\nvar _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");\n\n// 配置\n{\n    "plugins": [\n      "transform-runtime",\n      "transform-es2015-classes"\n    ]\n  }\n')])])]),t("h2",{attrs:{id:"手动指定预设"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#手动指定预设","aria-hidden":"true"}},[e._v("#")]),e._v(" 手动指定预设")]),e._v(" "),t("p",[e._v("可以手动指定预设")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('npm install --save-dev babel-plugin-transform-es2015-classes\n\n{\n   "plugins": [\n     "transform-es2015-classes"\n   ]\n}\n')])])]),t("h2",{attrs:{id:"根据环境配置-babel"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#根据环境配置-babel","aria-hidden":"true"}},[e._v("#")]),e._v(" 根据环境配置 babel")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('  {\n    "presets": ["es2015"],\n    "plugins": [],\n+   "env": {\n+     "development": {\n+       "plugins": [...]\n+     },\n+     "production": {\n+       "plugins": [...]\n+     }\n    }\n  }\n')])])]),t("p",[e._v('当前环境可以使用 process.env.BABEL_ENV 来获得。 如果 BABEL_ENV 不可用，将会替换成 NODE_ENV，并且如果后者也没有设置，那么缺省值是"development"。.')]),e._v(" "),t("p",[e._v("unix 在 npm script 里")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("BABEL_ENV=production [command]\nNODE_ENV=production [command]\n")])])]),t("p",[e._v("windows 需要先 SET BABEL_ENV=production 在执行 command")]),e._v(" "),t("p",[e._v("如果要统一，则使用"),t("a",{attrs:{href:"https://www.npmjs.com/package/cross-env",target:"_blank",rel:"noopener noreferrer"}},[e._v("cross-env"),t("OutboundLink")],1)]),e._v(" "),t("h2",{attrs:{id:"babel-的原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#babel-的原理","aria-hidden":"true"}},[e._v("#")]),e._v(" babel 的原理")]),e._v(" "),t("p",[t("code",[e._v("babel")]),e._v("使用的引擎是"),t("code",[e._v("babylon")]),e._v("，它是 fork 的"),t("code",[e._v("acorn")]),e._v("项目。")]),e._v(" "),t("ul",[t("li",[e._v("acorn 引擎，解析 ast")]),e._v(" "),t("li",[e._v("acorn-travesal 遍历 ast 树")]),e._v(" "),t("li",[e._v("acorn-")])]),e._v(" "),t("p",[e._v("babel 将源码转换成 ast，通过遍历 ast 树，对树做一些修改，然后将 ast 转成编译后的源码。")]),e._v(" "),t("p",[e._v("babel 工作流程如下：")]),e._v(" "),t("ol",[t("li",[e._v("babylon 将 code 转 ast，如果有不符合 babel 语法的代码，就报错。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var babylon = require('babylon')\n\nlet code = `\n\tlet a =1,b=2;\n\tfunction sum(a,b){\n\t\treturn a + b\n\t}\n\tsum(a , b)\n`\n\nlet ast = babylon.parse(code)\n\nconsole.log(ast)\n")])])]),t("ol",{attrs:{start:"2"}},[t("li",[e._v("babel-traverse 用来遍历 ast 树，然后插件再进行转化。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("traverse(ast, {\n\tenter(path){\n\t\tlet node = path.node\n\t\t// console.log(types.isFunctionDeclaration(node))\n\t\tif(types.isFunctionDeclaration(node)){\n\t\t\tpath.replaceWithSourceString(`function add(a, b){\n\t\t\t\treturn a+b\n\t\t\t}`)\n\t\t}\n\t}\n});\n")])])]),t("p",[e._v("babel-traverse 遍历树时，有 2 个钩子，enter 和 exit，enter 发生在进入当前节点，未进入子节点前。")]),e._v(" "),t("p",[e._v("babel 的插件就是定义如何转换当前结点，所以从这里可以看出 babel 的插件能做的事情，只能转换 ast 树，而不能在作用在前序阶段（语法分析）")]),e._v(" "),t("p",[e._v("babel 的插件体系分为两部分。")]),e._v(" "),t("ul",[t("li",[e._v("babel-preset-xxx")]),e._v(" "),t("li",[e._v("babel-plugin-xxx")])]),e._v(" "),t("p",[e._v("preset 和 plugin 其实是一个东西，preset 定义了一堆 plugin list。")]),e._v(" "),t("p",[e._v("preset 是倒序的，plugin 是正序的。也就是说")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("preset: ['es2015', 'react']\n")])])]),t("p",[e._v("是先执行 react 插件，再用 es2015。")]),e._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[e._v("babel-generator 将 ast 树转成源码")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("let {code} = generator(ast)\n")])])]),t("h2",{attrs:{id:"参考资料"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考资料","aria-hidden":"true"}},[e._v("#")]),e._v(" 参考资料")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"http://www.alloyteam.com/2017/04/analysis-of-babel-babel-overview/",target:"_blank",rel:"noopener noreferrer"}},[e._v("剖析 Babel——Babel 总览"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"http://www.jb51.net/article/51476.htm",target:"_blank",rel:"noopener noreferrer"}},[e._v("Node.js 中 require 的工作原理浅析"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"http://babeljs.io/docs/plugins/",target:"_blank",rel:"noopener noreferrer"}},[e._v("babel 官网"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://segmentfault.com/q/1010000005596587",target:"_blank",rel:"noopener noreferrer"}},[e._v("babel 的 polyfill 和 runtime 的区别"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=r.exports}}]);