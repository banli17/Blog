(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{287:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"深入浅出-node-js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#深入浅出-node-js","aria-hidden":"true"}},[t._v("#")]),t._v(" 深入浅出 node.js")]),t._v(" "),a("h2",{attrs:{id:"_7-网络编程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-网络编程","aria-hidden":"true"}},[t._v("#")]),t._v(" 7.网络编程")]),t._v(" "),a("p",[t._v("Node 提供了四个模块来处理网络请求。")]),t._v(" "),a("ul",[a("li",[t._v("net: 处理 tcp")]),t._v(" "),a("li",[t._v("dgram: 处理 udp")]),t._v(" "),a("li",[t._v("http: 处理 http")]),t._v(" "),a("li",[t._v("https: 处理 https")])]),t._v(" "),a("h3",{attrs:{id:"tcp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp","aria-hidden":"true"}},[t._v("#")]),t._v(" TCP")]),t._v(" "),a("p",[t._v("tcp 处于七层网络协议的传输层，http、smtp、imap 等协议是基于 tcp 的。三次握手。")]),t._v(" "),a("p",[t._v("创建会话的过程中，服务器端和客户端之间分别提供一个套接字，这两个套接字共同形成一个连接，服务器端和客户端则通过套接字实现两者直接连接的操作。")]),t._v(" "),a("p",[t._v("创建 tcp 服务器端")]),t._v(" "),a("p",[t._v("Domain Socket https://www.cnblogs.com/sparkdev/p/8359028.html")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("server"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("listen")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/tmp/echo.sock'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//对Domain Socket进行监听")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" client "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" net"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("connect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/tmp/echo.sock'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("可以通过 net 来创建服务端和客户端。")]),t._v(" "),a("ol",[a("li",[t._v("服务端")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" server "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" net"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createServer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("socket")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nserver"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("listen")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8124")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("服务端")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" server "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" net"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createServer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nserver"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'connection'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("socket")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nserver"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("listen")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8124")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[t._v("客户端")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" client "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" net"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("connect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("port"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8124")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nclient"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'data'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("funciton")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("data")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("服务器事件")]),t._v(" "),a("p",[t._v("net.createServer()创建的服务器，它是一个EventEmitter实例，自定义事件有：")]),t._v(" "),a("ul",[a("li",[t._v("listening: 通过server.listen(port, listeningListener)绑定端口或Domain Socket后触发，第二个参数传入")]),t._v(" "),a("li",[t._v("connection: 客户端连接时触发，简写为net.createServer()最后一个参数传入")]),t._v(" "),a("li",[t._v("close：服务器关闭时触发，调用server.close()后，服务器将停止接受新的套接字连接，但保持当前存在的连接，等待所有连接都断开后，会触发该事件")]),t._v(" "),a("li",[t._v("error: 服务器异常时触发")])]),t._v(" "),a("p",[t._v("连接事件\n服务器可以同时和多个客户端连接，每个连接都是可读写的Stream对象，通过data事件读取另一端的数据，通过write()将数据发送到另一端。")]),t._v(" "),a("ul",[a("li",[t._v("data")]),t._v(" "),a("li",[t._v("end: 当连接中任意一端发送了FIN数据")]),t._v(" "),a("li",[t._v("connect: 连接成功时触发")]),t._v(" "),a("li",[t._v("drain: 任意一端调用write发送数据时，当前这端会触发该事件")]),t._v(" "),a("li",[t._v("error:")]),t._v(" "),a("li",[t._v("close")]),t._v(" "),a("li",[t._v("timeout: 一定时间后连接不再活跃时，该时间会被触发，通知用户当前连接已经被闲置，可以通过socket.setTimeout(3000);设置时长")])]),t._v(" "),a("p",[t._v("两端都有这些事件。")]),t._v(" "),a("p",[t._v("Nagle算法[neɪgəl]")]),t._v(" "),a("p",[t._v("Nagle算法主要避免网络因为太多的小包（协议头的比例非常之大）而拥塞。")]),t._v(" "),a("p",[t._v("tcp 对网络数据中的小数据包会进行优化，要求缓冲区的数据达到一定数量或一定时间后才将其发出，所以小数据包会被Nagle算法合并，以此优化网络。这种优化虽然使网络带宽被有效利用，但是数据可能会延迟发送。")]),t._v(" "),a("p",[t._v("node 中，tcp 默认使用了 Nagle算法，可以调用 socket.setNoDelay(true)去掉Nagle算法，使得write可以立即发送数据到网络中。")]),t._v(" "),a("p",[t._v("一端的write 会触发另一端的data事件，但是并不是每次write都会触发data事件，在关闭Nagle算法后，另一端会收到多个小数据包合并，然后只触发一次data事件。")]),t._v(" "),a("h2",{attrs:{id:"http"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http","aria-hidden":"true"}},[t._v("#")]),t._v(" HTTP")]),t._v(" "),a("p",[t._v("curl -v 可以显示这次网络通信的所有报文信息")]),t._v(" "),a("p",[t._v("node 中，http 模块继承自 tcp 服务器(net 模块)，它能够与多个客户端保持连接。它是采用事件驱动，不为每个连接创建额外的线程或进程。")]),t._v(" "),a("p",[t._v("客户端")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("host")]),t._v(": 服务器的域名或 IP 地址，默认为 localhost")]),t._v(" "),a("li",[a("code",[t._v("hostname")]),t._v(": 服务器名称")]),t._v(" "),a("li",[a("code",[t._v("port")])]),t._v(" "),a("li",[a("code",[t._v("localAddress")]),t._v(": 建立网络连接的本地网卡")]),t._v(" "),a("li",[a("code",[t._v("socketPath")]),t._v(": Domain 套接字路径")]),t._v(" "),a("li",[a("code",[t._v("method")]),t._v(": HTTP 请求方法，默认为 GET")]),t._v(" "),a("li",[a("code",[t._v("path")]),t._v(": 请求路径，默认为 /")]),t._v(" "),a("li",[a("code",[t._v("headers")]),t._v(": 请求头对象")]),t._v(" "),a("li",[a("code",[t._v("auth")]),t._v(": Basic 认证，这个值被计算成请求头中的 Authorization 部分")])]),t._v(" "),a("p",[t._v("请求体的内容由请求对象的 write() 和 end() 方法实现，write() 向连接中写入数据，end() 告知报文结束。")]),t._v(" "),a("p",[t._v("clientRequest 对象中，事件叫 response，ClientRequest 对象解析完响应头时，会触发request事件，同时传递一个响应对象以供操作 ClientRequest，后续响应报文体以只读流的方式提供。")]),t._v(" "),a("p",[t._v("为了重用 TCP 连接，http 模块包含一个默认的客户端代理对象 http.globalAgent，他对每个服务器端(host+port)创建的连接进行管理，默认情况下，通过ClientRequest对象对同一个服务器端发起的HTTP请求最多可以创建5个连接，多余的会排队等待，实质是一个连接池。这与浏览器同一个域名连接数限制行为是相同的。")]),t._v(" "),a("p",[t._v("可以通过下面方法改变。或者将 agent 设置为 false 脱离连接池管理。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var agent = new http.Agent({\n    maxSockets: 10\n})\nvar options = {\n    ...\n    agent: agent\n}\n")])])]),a("p",[t._v("可以通过 Agent 对象的 sockets 和 requests 属性，分析业务状态的繁忙程度。\nsockets: 当前连接池中使用中的连接数\nrequests：处于等待的请求数")])])}),[],!1,null,null,null);s.default=e.exports}}]);