(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{237:function(s,t,a){s.exports=a.p+"assets/img/5.e114d7ca.png"},238:function(s,t,a){s.exports=a.p+"assets/img/6.a187e49a.png"},239:function(s,t,a){s.exports=a.p+"assets/img/7.7469f764.png"},240:function(s,t,a){s.exports=a.p+"assets/img/8.3aa2b062.png"},241:function(s,t,a){s.exports=a.p+"assets/img/10.b276698a.png"},310:function(s,t,a){"use strict";a.r(t);var n=a(0),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"sql-必知必会"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sql-必知必会","aria-hidden":"true"}},[s._v("#")]),s._v(" SQL 必知必会")]),s._v(" "),n("h2",{attrs:{id:"_4-ddl"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-ddl","aria-hidden":"true"}},[s._v("#")]),s._v(" 4 DDL")]),s._v(" "),n("h3",{attrs:{id:"数据库"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数据库","aria-hidden":"true"}},[s._v("#")]),s._v(" 数据库")]),s._v(" "),n("div",{staticClass:"language-sql extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sql"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 创建")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DATABASE")]),s._v(" nba"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DROP")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DATABASE")]),s._v(" nba"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),n("h3",{attrs:{id:"修改数据表"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#修改数据表","aria-hidden":"true"}},[s._v("#")]),s._v(" 修改数据表")]),s._v(" "),n("div",{staticClass:"language-sql extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sql"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 添加字段")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ALTER")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" player "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ADD")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("age "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 重命名字段")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ALTER")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" player "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RENAME")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COLUMN")]),s._v(" age "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("to")]),s._v(" player_age\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 修改字段结构")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ALTER")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" player "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("MODIFY")]),s._v(" player_age "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("float")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除字段")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ALTER")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" player "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DROP")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COLUMN")]),s._v(" player_age"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),n("h3",{attrs:{id:"创建表结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#创建表结构","aria-hidden":"true"}},[s._v("#")]),s._v(" 创建表结构")]),s._v(" "),n("div",{staticClass:"language-sql extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sql"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DROP")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("IF")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXISTS")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("player"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("player"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("player_id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("NOT")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AUTO_INCREMENT")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("team_id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("NOT")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("player_name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("varchar")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("255")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CHARACTER")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" utf8 "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COLLATE")]),s._v(" utf8_general_ci "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("NOT")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("height"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("float")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DEFAULT")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PRIMARY")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("KEY")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("player_id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("USING")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BTREE")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("UNIQUE")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INDEX")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("player_name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("player_name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("USING")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BTREE")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENGINE")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("InnoDB")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CHARACTER")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" utf8 "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COLLATE")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" utf8_general_ci ROW_FORMAT "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Dynamic"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),n("p",[s._v("数据表和字段都使用了反引号，这是为了避免它们的名称与 MySQL 保留字段相同。")]),s._v(" "),n("p",[s._v("其中 player_name 字段的字符集是 utf8，排序规则是 utf8_general_ci，代表对大小写不敏感，如果设置为 utf8_bin，代表对大小写敏感。")]),s._v(" "),n("p",[s._v("USING BTREE 表示使用索引，还有 HASH 方式。PRIMARY KEY 表示主键，索引有唯一索引(UNIQUE INDEX)和普通索引(NORMAL INDEX)。")]),s._v(" "),n("p",[s._v("约束: 目的是保证数据的准确性和一致性。")]),s._v(" "),n("ul",[n("li",[s._v("主键约束: 唯一不重复，不能为空，即 UNIQUE + NOT NULL，一个表主键只能有一个，主键可以是一个字段或多个字段复合组成。")]),s._v(" "),n("li",[s._v("外键约束：确保表与表之间引用的完整性，一个表中的外键对应另一张表的主键。外键可以重复，也可以为空。")]),s._v(" "),n("li",[s._v("唯一性约束：表示字段在表中数值是唯一的。")]),s._v(" "),n("li",[s._v("NOT NULL 约束")]),s._v(" "),n("li",[s._v("DEFAULT，字段的默认值")]),s._v(" "),n("li",[s._v("CHECK 约束，检查值的有效性，比如身高 ，"),n("code",[s._v("CHECK(height>=0 AND height <3)")])])]),s._v(" "),n("p",[s._v("唯一性约束和普通索引的区别：唯一性约束相当于创建了一个约束和普通索引，目的是保证字段的正确性，而普通索引只是提升数据检索的速度，并不对字段的唯一性进行约束。")]),s._v(" "),n("p",[s._v("主键、外键和索引")]),s._v(" "),n("h3",{attrs:{id:"设计数据表的原则"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#设计数据表的原则","aria-hidden":"true"}},[s._v("#")]),s._v(" 设计数据表的原则")]),s._v(" "),n("p",[s._v("思考：")]),s._v(" "),n("ul",[n("li",[s._v("用户需要什么数据？需要在数据表中保存哪些数据？哪些数据经常被访问？如何提升检索效率？")]),s._v(" "),n("li",[s._v("如何保证数据表数据的正确性，当插入、删除、更新的时候该进行怎样的约束检查？如何降低数据表的数据冗余度，保证数据表不会因为用户量的增长而迅速扩张？")]),s._v(" "),n("li",[s._v("如何让负责数据库维护的人员更方便的使用数据库？")])]),s._v(" "),n("p",[s._v("三少一多原则:")]),s._v(" "),n("ol",[n("li",[s._v("数据表的个数越少越好")])]),s._v(" "),n("p",[s._v("RDBMS 的核心在于对实体和联系的定义，也就是 E-R 图（Entity Relationship Diagram），数据表越少，证明实体和联系设计得越简洁，既方便理解又方便操作。")]),s._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[s._v("数据表的字段个数越少越好")])]),s._v(" "),n("p",[s._v("字段个数越多，数据冗余的可能性越大。设置字段个数少的前提是各个字段相互独立，而不是某个字段的取值可以由其他字段计算出来。当然字段个数少是相对的，我们通常会在数据冗余和检索效率中进行平衡。")]),s._v(" "),n("ol",{attrs:{start:"3"}},[n("li",[s._v("数据表中联合主键的字段个数越少越好")])]),s._v(" "),n("p",[s._v("设置主键是为了确定唯一性，当一个字段无法确定唯一性的时候，就需要采用联合主键的方式（也就是用多个字段来定义一个主键）。联合主键中的字段越多，占用的索引空间越大，不仅会加大理解难度，还会增加运行时间和索引空间，因此联合主键的字段个数越少越好。")]),s._v(" "),n("ol",{attrs:{start:"4"}},[n("li",[s._v("使用主键和外键越多越好")])]),s._v(" "),n("p",[s._v("数据库的设计实际上就是定义各种表，以及各种字段之间的关系。这些关系越多，证明这些实体之间的冗余度越低，利用度越高。这样做的好处在于不仅保证了数据表之间的独立性，还能提升相互之间的关联使用率。")]),s._v(" "),n("p",[s._v("“三少一多”原则的核心就是简单可复用。简单指的是用更少的表、更少的字段、更少的联合主键字段来完成数据表的设计。可复用则是通过主键、外键的使用来增强数据表之间的复用率。因为一个主键可以理解是一张表的代表。键设计得越多，证明它们之间的利用率越高。")]),s._v(" "),n("h2",{attrs:{id:"_5-select-查询数据"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-select-查询数据","aria-hidden":"true"}},[s._v("#")]),s._v(" 5 select 查询数据")]),s._v(" "),n("p",[n("img",{attrs:{src:a(237),alt:""}})]),s._v(" "),n("h3",{attrs:{id:"select-基础语法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#select-基础语法","aria-hidden":"true"}},[s._v("#")]),s._v(" select 基础语法")]),s._v(" "),n("div",{staticClass:"language-sql extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sql"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查询列， as别名")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 避免使用 *，因为写清列名，可以减少数据表查询的网络传输量，")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" name "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" age "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" a "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" heros"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查询常数，platform 在表中不存在，是 sql 构建出来的，在多表查询时可能有用")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 注意要用引号，否则会解析为列名，数字不需要引号")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'王者荣耀'")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" platform"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" name "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" heros"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("--------------+--------------+")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" platform     "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" name         "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("--------------+--------------+")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" 王者荣耀     "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" 夏侯惇       "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" 王者荣耀     "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" 钟无艳       "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("--------------+--------------+")]),s._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 去除重复行，使用 DISTINCT 关键字")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# DISTINCT需要放到所有列名的前面,")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DISTINCT")]),s._v(" attack_range "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" heros"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 多个列名时它实际是对一个组合（所有列名）的去重")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DISTINCT")]),s._v(" attack_range"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" name "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" heros"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 排序 ORDER BY")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 排序列名，可以一个或多个")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 排序规则，默认 ASC 递增、DESC 递减，如果是字符串，需要看具体设置，如 MYSQL 建字段时 BINARY 属性表示字段区分大小写")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 非选择性排序：即SELECT 没有列 name，也可以使用 ORDER BY name")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ORDER BY 通常位于 SELECT 最后一条子句，否则会报错")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" hp_max "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" heros "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" mp_max"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" hp_max "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DESC")]),s._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 约束返回结果的数量 LIMIT")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# MYSQL 中需要放在最后面")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" hp_max "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" heros "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" hp_max "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LIMIT")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),n("p",[s._v("SELECT 执行顺序")]),s._v(" "),n("ol",[n("li",[s._v("关键字顺序")])]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("SELECT ... FROM ... WHERE ... GROUP BY ... HAVING ... ORDER BY ...\n")])])]),n("ol",{attrs:{start:"2"}},[n("li",[s._v("语句执行顺序")])]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("FROM > WHERE > GROUP BY > HAVING > SELECT的字段 > DISTINCT > ORDER BY > LIMIT\n")])])]),n("p",[s._v("在 SELECT 语句执行这些步骤的时候，每个步骤都会产生一个虚拟表，然后将这个虚拟表传入下一个步骤中作为输入。")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("SELECT DISTINCT player_id, player_name, count(*) as num #顺序5\nFROM player JOIN team ON player.team_id = team.team_id #顺序1\nWHERE height > 1.80 #顺序2\nGROUP BY player.team_id #顺序3\nHAVING num > 2 #顺序4\nORDER BY num DESC #顺序6\nLIMIT 2 #顺序7\n")])])]),n("p",[s._v("SQL 的执行原理:")]),s._v(" "),n("p",[s._v("首先，你可以注意到，SELECT 是先执行 FROM 这一步的。在这个阶段，如果是多张表联查，还会经历下面的几个步骤：")]),s._v(" "),n("p",[s._v("首先先通过 CROSS JOIN 求笛卡尔积，相当于得到虚拟表 vt（virtual table）1-1；\n通过 ON 进行筛选，在虚拟表 vt1-1 的基础上进行筛选，得到虚拟表 vt1-2；\n添加外部行。如果我们使用的是左连接、右链接或者全连接，就会涉及到外部行，也就是在虚拟表 vt1-2 的基础上增加外部行，得到虚拟表 vt1-3。\n当然如果我们操作的是两张以上的表，还会重复上面的步骤，直到所有表都被处理完为止。这个过程得到是我们的原始数据。")]),s._v(" "),n("p",[s._v("当我们拿到了查询数据表的原始数据，也就是最终的虚拟表 vt1，就可以在此基础上再进行 WHERE 阶段。在这个阶段中，会根据 vt1 表的结果进行筛选过滤，得到虚拟表 vt2。")]),s._v(" "),n("p",[s._v("然后进入第三步和第四步，也就是 GROUP 和 HAVING 阶段。在这个阶段中，实际上是在虚拟表 vt2 的基础上进行分组和分组过滤，得到中间的虚拟表 vt3 和 vt4。这中间会使用聚集函数进行计算，所以第四步 num>2 会在 SELECT 之前就可以使用。")]),s._v(" "),n("p",[s._v("当我们完成了条件筛选部分之后，就可以筛选表中提取的字段，也就是进入到 SELECT 和 DISTINCT 阶段。")]),s._v(" "),n("p",[s._v("首先在 SELECT 阶段会提取想要的字段，然后在 DISTINCT 阶段过滤掉重复的行，分别得到中间的虚拟表 vt5-1 和 vt5-2。")]),s._v(" "),n("p",[s._v("当我们提取了想要的字段数据之后，就可以按照指定的字段进行排序，也就是 ORDER BY 阶段，得到虚拟表 vt6。")]),s._v(" "),n("p",[s._v("最后在 vt6 的基础上，取出指定行的记录，也就是 LIMIT 阶段，得到最终的结果，对应的是虚拟表 vt7。")]),s._v(" "),n("p",[s._v("当然我们在写 SELECT 语句的时候，不一定存在所有的关键字，相应的阶段就会省略。")]),s._v(" "),n("p",[s._v("同时因为 SQL 是一门类似英语的结构化查询语言，所以我们在写 SELECT 语句的时候，还要注意相应的关键字顺序，所谓底层运行的原理，就是我们刚才讲到的执行顺序。")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("如何排序检索数据")])]),s._v(" "),n("li",[n("p",[s._v("什么情况下使用 select *，如何提升 select 查询效率？")])])]),s._v(" "),n("h2",{attrs:{id:"_6-数据过滤"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-数据过滤","aria-hidden":"true"}},[s._v("#")]),s._v(" 6 数据过滤")]),s._v(" "),n("p",[s._v("提升查询效率：约束返回结果的数量，指定筛选条件进行过滤。")]),s._v(" "),n("p",[s._v("目标：")]),s._v(" "),n("ol",[n("li",[s._v("WHERE 子句 + 比较运算符过滤")]),s._v(" "),n("li",[s._v("使用逻辑运算符进行多条件过滤")]),s._v(" "),n("li",[s._v("使用通配符进行复杂过滤")])]),s._v(" "),n("p",[s._v("比较运算符：")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("=\n<> 或 !=\n<\n<= 或 !>\n>\n>= 或 !<\nBETWEEN 可以取到边界值\nIS NULL\n")])])]),n("div",{staticClass:"language-sql extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sql"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查询所有最大生命值大于 6000 的英雄")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" hp_max "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" heros "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" hp_max "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("6000")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" hp_max "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" heros "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" hp_max "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("6000")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" hp_max"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查询所有最大生命值在5399到6811之间的英雄")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" hp_max "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" heros "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" hp_max "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("BETWEEN")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5339")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("6811")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 对heros表中的hp_max字段进行空值检查")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" hp_max "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" heros "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" hp_max "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("IS")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),n("p",[s._v("逻辑运算符")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("AND 并且\nOR 或者\nIN  在指定条件范围内\nNOT 非\n")])])]),n("div",{staticClass:"language-sql extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sql"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 筛选最大生命值大于6000，最大法力大于1700的英雄，然后按照最大生命值和最大法力值之和从高到低进行排序")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" hp_max"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" mp_max "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" heros "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" hp_max "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("6000")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" mp_max "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1700")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("hp_max"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("mp_max"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DESC")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查询最大生命值加最大法力值大于8000的英雄，或者最大生命值大于6000并且最大法力值大于1700的英雄")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# AND 优先级比 OR 高")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" hp_max"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" mp_max "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" heros "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("hp_max"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("mp_max"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("8000")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("OR")]),s._v(" hp_max "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("6000")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" mp_max "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1700")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("hp_max"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("mp_max"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DESC")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查询主要定位或者次要定位是法师或是射手的英雄，同时英雄的上线时间不在2016-01-01到2017-01-01之间")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" role_main"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" role_assist"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" hp_max"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" mp_max"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" birthdate\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" heros\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("role_main "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("IN")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'法师'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'射手'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("OR")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("role_assist"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("IN")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'法师'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'射手'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DATE")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("birthdate"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("NOT")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("BETWEEN")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'2016-01-01'")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'2017-01-01'")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("hp_max"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("mp_max"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DESC")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),n("p",[s._v("使用通配符进行过滤。注意它需要消耗数据库更长的时间来进行匹配。即使对 LIKE 检索的字段进行索引，索引的价值也可能消失。如果要让索引生效，LIKE 后面就不能以 % 开头，如"),n("code",[s._v("LIKE '%太'")]),s._v("会对全表扫描，而"),n("code",[s._v("LIKE '太%'")]),s._v("就不会。")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("%")]),s._v(" 表示 0 到多个字符。")]),s._v(" "),n("li",[n("code",[s._v("_")]),s._v(" 表示 1 个字符。")])]),s._v(" "),n("div",{staticClass:"language-sql extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sql"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 名字包含张良的英雄")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" name "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" heros "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" name "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("LIKE")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%张良%'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 匹配东皇太一")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" name "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" heros "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" name "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("LIKE")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'_%太%'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),n("div",{staticClass:"language-sql extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sql"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 请你编写SQL语句，对英雄名称、主要定位、次要定位、最大生命和最大法力进行查询，筛选条件为：主要定位是坦克或者战士，并且次要定位不为空，同时满足最大生命值大于8000或者最大法力小于1500的英雄，并且按照最大生命和最大法力之和从高到底的顺序进行排序。")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" role_main"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" role_assist"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" hp_max"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" mp_max\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" heros\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("role_main "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("IN")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'坦克'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'战士'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" role_assist "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("IS")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("NOT")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("hp_max "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("8000")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("OR")]),s._v(" mp_max "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1500")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("hp_max "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" mp_max"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DESC")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),n("p",[n("img",{attrs:{src:a(238),alt:""}})]),s._v(" "),n("h2",{attrs:{id:"_7-sql-函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-sql-函数","aria-hidden":"true"}},[s._v("#")]),s._v(" 7 SQL 函数")]),s._v(" "),n("p",[s._v("函数分为内置函数和自定义函数。")]),s._v(" "),n("p",[s._v("内置函数：")]),s._v(" "),n("ul",[n("li",[s._v("算术函数")]),s._v(" "),n("li",[s._v("字符串函数")]),s._v(" "),n("li",[s._v("日期函数")]),s._v(" "),n("li",[s._v("转换函数(数据类型转换)")])]),s._v(" "),n("p",[n("strong",[s._v("算术函数")])]),s._v(" "),n("ul",[n("li",[s._v("ABS() 绝对值")]),s._v(" "),n("li",[s._v("MOD() 取余")]),s._v(" "),n("li",[s._v("ROUND() 四舍五入为指定的小数位数，需要两个参数：字段名、小数位数")])]),s._v(" "),n("div",{staticClass:"language-sql extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sql"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 2")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" ABS"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 2")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("MOD")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("101")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 37.3")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ROUND")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("37.25")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),n("p",[n("strong",[s._v("字符串函数")])]),s._v(" "),n("ul",[n("li",[s._v("CONCAT() 将多个字符串拼接起来")]),s._v(" "),n("li",[s._v("LENGTH() 计算字段的长度，一个汉字算 3 个字符，一个数字或字母算一个字符")]),s._v(" "),n("li",[s._v("CHAR_LENGTH() 计算字段的长度，一个汉字、数字或字母都算一个字符")]),s._v(" "),n("li",[s._v("LOWER() 字符串转小写")]),s._v(" "),n("li",[s._v("UPPER() 字符串转大写")]),s._v(" "),n("li",[s._v("REPLACE() 替换函数，3 个参数分别是要替换的表达式或字段名，要查找的被替换字符串，替换成哪个字符串")]),s._v(" "),n("li",[s._v("SUBSTRING() 截取字符串，3 个参数分别是待截取的表达式或字符串，开始截取的位置(从 1 开始)，想要截取的长度")])]),s._v(" "),n("div",{staticClass:"language-sql extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sql"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" CONCAT"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'abc'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("123")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("，运行结果为abc123。\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" LENGTH"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'你好'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("，运行结果为"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v("。\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" CHAR_LENGTH"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'你好'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("，运行结果为"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("。\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" LOWER"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'ABC'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("，运行结果为abc。\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" UPPER"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'abc'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("，运行结果ABC。\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("REPLACE")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'fabcd'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'abc'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("123")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("，运行结果为f123d。\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" SUBSTRING"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'fabcd'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("，运行结果为fab。\n")])])]),n("p",[n("strong",[s._v("日期函数")])]),s._v(" "),n("ul",[n("li",[s._v("CURRENT_DATE() 系统当前日期")]),s._v(" "),n("li",[s._v("CURRENT_TIME() 系统当前时间，没有具体日期")]),s._v(" "),n("li",[s._v("CURRENT_TIMESTAMP() 抽取具体的年、月、日")]),s._v(" "),n("li",[s._v("DATE() 返回时间的日期部分")]),s._v(" "),n("li",[s._v("YEAR() 返回时间的年份部分")]),s._v(" "),n("li",[s._v("MONTH() 返回时间的月份部分")]),s._v(" "),n("li",[s._v("DAY() 返回时间的天数部分")]),s._v(" "),n("li",[s._v("HOUR() 返回时间的小时部分")]),s._v(" "),n("li",[s._v("MINUTE() 返回时间的分钟部分")]),s._v(" "),n("li",[s._v("SECOND() 返回时间的秒部分")])]),s._v(" "),n("div",{staticClass:"language-sql extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sql"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CURRENT_DATE")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("，运行结果为"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2019")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("04")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("03")]),s._v("。\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CURRENT_TIME")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("，运行结果为"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("21")]),s._v(":"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("26")]),s._v(":"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("34")]),s._v("。\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CURRENT_TIMESTAMP")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("，运行结果为"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2019")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("04")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("03")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("21")]),s._v(":"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("26")]),s._v(":"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("34")]),s._v("。\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" EXTRACT"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("YEAR")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'2019-04-03'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("，运行结果为"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2019")]),s._v("。\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# DATE日期格式必须是yyyy-mm-dd的形式。如果要进行日期比较，就要使用DATE函数，不要直接使用日期与字符串进行比较")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DATE")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'2019-04-01 12:00:05'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("，运行结果为"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2019")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("04")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("01")]),s._v("。\n")])])]),n("p",[n("strong",[s._v("转换函数")])]),s._v(" "),n("ul",[n("li",[s._v("CAST() 数据类型转换，通过 AS 分隔 2 个参数分别是原始数据和目标数据类型")]),s._v(" "),n("li",[s._v("COALESCE() 返回第一个非空数值")])]),s._v(" "),n("div",{staticClass:"language-sql extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sql"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 报错，小数不能转为整数")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" CAST"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("123.123")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INT")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 精度8（整数+小数位最多8位），小数位数为2位")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" CAST"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("123.123")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DECIMAL")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 返回第一个非空值")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COALESCE")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'hi'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),n("p",[s._v("为什么使用 SQL 函数会带来问题？\n版本兼容和不同的数据库可能不兼容。\n大小写规范？\nMYSQL 在 Linux，数据库名、表名、变量名严格区分大小写，字段名忽略大小写。而在 Windows 环境下全部不区分大小写。\n所以")]),s._v(" "),n("ul",[n("li",[s._v("关键字和函数名称全部大写")]),s._v(" "),n("li",[s._v("数据库名、表名、字段名全部小写")]),s._v(" "),n("li",[s._v("分号结尾")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(239),alt:""}})]),s._v(" "),n("div",{staticClass:"language-sql extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sql"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将 attack_growth 四舍五入一位")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" attack_growth"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ROUND")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("attack_growth"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" heros"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("MAX")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("hp_max"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" heros"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 想显示英雄的名字，以及他们的名字字数，需要用到CHAR_LENGTH函数。")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" CHAR_LENGTH"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" hp_max "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" heros "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" hp_max "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("MAX")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("hp_max"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" heros"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 假如想要提取英雄上线日期（对应字段birthdate）的年份，只显示有上线日期的英雄即可（有些英雄没有上线日期的数据，不需要显示）")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("YEAR")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("birthdate"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" birthdate "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" heros "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" birthdate "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("IS")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("NOT")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" EXTRACT"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("YEAR")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" birthdate"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" birthdate "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" heros "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" birthdate "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("IS")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("NOT")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 假设我们需要找出在2016年10月1日之后上线的所有英雄。这里我们可以采用DATE函数来判断birthdate的日期是否大于2016-10-01，即WHERE DATE(birthdate)>'2016-10-01'，然后再显示符合要求的全部字段信息")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" birthdate "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" heros "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DATE")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("birthdate"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'2016-10-01'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 假设我们需要知道在2016年10月1日之后上线英雄的平均最大生命值、平均最大法力和最高物攻最大值。同样我们需要先筛选日期条件，即WHERE DATE(birthdate)>'2016-10-01'，然后再选择AVG(hp_max), AVG(mp_max), MAX(attack_max)字段进行显示。")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SElECT")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("AVG")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("hp_max"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("AVG")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("mp_max"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("MAX")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("attack_max"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" heros "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DATE")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("birthdate"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'2016-10-01'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 计算英雄的最大生命平均值；显示出所有在2017年之前上线的英雄，如果英雄没有统计上线日期则不显示。")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("AVG")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("hp_max"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" heros "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" birthdate "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("IS")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("NOT")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("YEAR")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("birthdate"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'2017'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),n("h2",{attrs:{id:"_8-聚集函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-聚集函数","aria-hidden":"true"}},[s._v("#")]),s._v(" 8 聚集函数")]),s._v(" "),n("p",[s._v("用于对一组数据进行汇总的函数，输入是一组数据的集合，输出是单个值。")]),s._v(" "),n("p",[s._v("目标：")]),s._v(" "),n("ul",[n("li",[s._v("聚集函数有哪些，能否在一条 SELECT 语句中使用多个聚集函数。")]),s._v(" "),n("li",[s._v("如何对数据进行分组，并进行聚集统计。")]),s._v(" "),n("li",[s._v("如何使用 HAVING 过滤分组，HAVING 和 WHERE 的区别是什么。")])]),s._v(" "),n("h3",{attrs:{id:"_5-个聚集函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-个聚集函数","aria-hidden":"true"}},[s._v("#")]),s._v(" 5 个聚集函数")]),s._v(" "),n("ul",[n("li",[s._v("COUNT() 总行数")]),s._v(" "),n("li",[s._v("MAX()")]),s._v(" "),n("li",[s._v("MIN()")]),s._v(" "),n("li",[s._v("SUM()")]),s._v(" "),n("li",[s._v("AVG()")])]),s._v(" "),n("div",{staticClass:"language-sql extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sql"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查询最大生命值大于6000的英雄数量")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("COUNT")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" heros "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" hp_max "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("6000")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查询最大生命值大于6000，且有次要定位的英雄数量，需要使用COUNT函数。")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# COUNT(x) 会忽略 x 为 NULL 的数据行")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("COUNT")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("role_assist"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" heros "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" hp_max "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("6000")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查询射手（主要定位或者次要定位是射手）的最大生命值的最大值是多少，需要使用MAX函数")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("MAX")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("hp_max"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" heros "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" role_main "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'射手'")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("OR")]),s._v(" role_assist "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'射手'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果想要知道英雄的数量，我们使用的是COUNT(*)函数，求平均值、最大值、最小值，以及总的防御最大值，我们分别使用的是AVG、MAX、MIN和SUM函数。")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("COUNT")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("AVG")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("hp_max"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("MAX")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("mp_max"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("MIN")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("attack_max"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("SUM")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("defense_max"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" heros "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" role_main "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'射手'")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("or")]),s._v(" role_assist "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'射手'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# MAX和MIN函数也可以用于字符串类型数据的统计，如果是英文字母，则按照A—Z的顺序排列，越往后，数值越大。如果是汉字则按照全拼拼音进行排列。先把name字段统一转化为gbk类型，使用CONVERT(name USING gbk)，然后再使用MIN和MAX取最小值和最大值。")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("MIN")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CONVERT")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("USING")]),s._v(" gbk"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("MAX")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CONVERT")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("USING")]),s._v(" gbk"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" heros"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 想要查询不同的生命最大值的英雄数量是多少")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("COUNT")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DISTINCT")]),s._v(" hp_max"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" heros"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DISTINCT")]),s._v(" birthdate "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" heros"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 不同生命最大值英雄的平均生命最大值，保留小数点后两位。")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ROUND")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("AVG")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DISTINCT")]),s._v(" hp_max"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" heros"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),n("p",[s._v("对数据进行分组，并进行聚合统计")]),s._v(" "),n("div",{staticClass:"language-sql extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sql"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 想按照英雄的主要定位进行分组，并统计每组的英雄数量。")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("COUNT")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" role_main "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" heros "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("GROUP")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" role_main"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 按次要定位进行分组")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("COUNT")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" role_assist "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" heros "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("GROUP")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" role_assist"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 按照英雄的主要定位、次要定位进行分组，查看这些英雄的数量，并按照这些分组的英雄数量从高到低进行排序")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("COUNT")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" num"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" role_main"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" role_assist "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" heros "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("GROUP")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" role_main"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" role_assist "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" num "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DESC")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 按照英雄的主要定位、次要定位进行分组，并且筛选分组中英雄数量大于5的组，最后按照分组中的英雄数量从高到低进行排序")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("COUNT")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" num"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" role_main"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" role_assist "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" heros "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("GROUP")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" role_main"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" role_assist "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("HAVING")]),s._v(" num "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" num "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DESC")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 筛选最大生命值大于6000的英雄，按照主要定位、次要定位进行分组，并且显示分组中英雄数量大于5的分组，按照数量从高到低进行排序。")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SElECT")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("COUNT")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" num"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" role_main"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" role_assist "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" heros "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" hp_max "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("6000")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("GROUP")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" role_main"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" role_assist "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("HAVING")]),s._v(" num "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" num "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DESC")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),n("p",[s._v("WHERE 用于对数据行进行过滤，HAVING 用于对分组进行过滤。并且 HAVING 支持所有 WHERE 操作。")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("SELECT ... FROM ... WHERE ... GROUP BY ... HAVING ... ORDER BY ...\n")])])]),n("p",[n("img",{attrs:{src:a(240),alt:""}})]),s._v(" "),n("h2",{attrs:{id:"_9-子查询"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-子查询","aria-hidden":"true"}},[s._v("#")]),s._v(" 9 子查询")]),s._v(" "),n("p",[s._v("嵌套在查询中的查询叫做子查询。")]),s._v(" "),n("p",[s._v("目标：")]),s._v(" "),n("ul",[n("li",[s._v("子查询可以分为关联子查询和非关联子查询")]),s._v(" "),n("li",[s._v("子查询关键词")]),s._v(" "),n("li",[s._v("子查询怎么作为主查询的列")])]),s._v(" "),n("p",[s._v("子查询从数据表查询了结果，如果这个数据结果只执行一次，然后这个结果作为主查询的条件进行执行，这样的子查询叫做非关联子查询。")]),s._v(" "),n("p",[s._v("如果子查询需要执行多次，即采用循环的方式，先从外部查询开始，每次都传入子查询进行查询，然后再将结果反馈给外部，这样的嵌套执行方式叫做关联子查询。")]),s._v(" "),n("h2",{attrs:{id:"_10-常用的-sql-标准和连接"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10-常用的-sql-标准和连接","aria-hidden":"true"}},[s._v("#")]),s._v(" 10 常用的 SQL 标准和连接")]),s._v(" "),n("p",[s._v("SQL 的核心就是关系，关系的核心就是连接。 SQL 有 2 个主要的标准：SQL92(SQL-2) 和 SQL99(SQL-3)。")]),s._v(" "),n("p",[s._v("SQL92 的 5 种连接方式：笛卡尔积、等值连接、非等值连接、外连接(左连接、右连接)和自连接。")]),s._v(" "),n("p",[n("strong",[s._v("笛卡尔积")])]),s._v(" "),n("p",[s._v("X 和 Y 的笛卡尔积就是 X 和 Y 的所有可能组合。")]),s._v(" "),n("p",[s._v("笛卡尔积也叫做交叉连接（CROSS JOIN)，它的作用就是把任意表进行连接，即使两个表不相关。")]),s._v(" "),n("div",{staticClass:"language-sql extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sql"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" player"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" team_score"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),n("p",[n("strong",[s._v("等值连接")])]),s._v(" "),n("p",[s._v("等值连接就是将两张表中都存在的列进行连接。")]),s._v(" "),n("div",{staticClass:"language-sql extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sql"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" player_id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" player"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("team_id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" player_name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" height"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" team_name "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" player"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" team "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" player"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("team_id "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" team"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("team_id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 上面可以使用别名，但是一旦用了别名，查询中的子段也需要用别名")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" player_id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("team_id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" player_name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" height"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" team_name "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" player "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" team "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" b "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("team_id "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("team_id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),n("p",[n("strong",[s._v("非等值连接")])]),s._v(" "),n("p",[s._v("当进行多表查询时，如果连接多个表的条件是等号时，就是等值连接，其它的运算符连接就是非等值连接。")]),s._v(" "),n("div",{staticClass:"language-sql extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sql"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查询每个球员的身高级别")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" player_name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" height_level "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" player "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" height_grades "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" b "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("height "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("BETWEEN")]),s._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("height_lowest "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("height_highest"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),n("p",[n("strong",[s._v("外连接")])]),s._v(" "),n("p",[s._v("左外连接就是左边的表为主表，需要显示左边表的全部行，而右侧的表是从表，(+) 表示哪个是从表。")]),s._v(" "),n("div",{staticClass:"language-sql extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sql"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# sql92")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" player"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" team "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" player"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("team_id "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" team"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("team_id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# sql99")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" player "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LEFT")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("JOIN")]),s._v(" team "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("on")]),s._v(" player"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("team_id "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" team"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("team_id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),n("p",[n("strong",[s._v("自连接")])]),s._v(" "),n("p",[s._v("查询条件中使用了当前表的字段。")]),s._v(" "),n("div",{staticClass:"language-sql extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sql"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("player_name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("height "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" player "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" player "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" b "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("player_name "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'布雷克-格里芬'")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("height "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("height"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 不用自连接，需要查询两次")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" player_name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" height "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" player "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" height "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" height "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" player "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" player_name "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'布雷克-格里芬'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),n("p",[n("img",{attrs:{src:a(241),alt:""}})])])}),[],!1,null,null,null);t.default=e.exports}}]);