(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{207:function(t,a,s){t.exports=s.p+"assets/img/bindActionCreators.af1f1602.png"},208:function(t,a,s){t.exports=s.p+"assets/img/connect.3274ae64.png"},209:function(t,a,s){t.exports=s.p+"assets/img/redux-async.1a155a68.png"},300:function(t,a,s){"use strict";s.r(a);var e=s(0),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"redux"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redux","aria-hidden":"true"}},[t._v("#")]),t._v(" redux")]),t._v(" "),e("p",[t._v("传统")]),t._v(" "),e("ul",[e("li",[t._v("一个 view 可能使用多个 model")]),t._v(" "),e("li",[t._v("一个 model 可能被多个 view 使用")])]),t._v(" "),e("p",[t._v("redux")]),t._v(" "),e("ul",[e("li",[t._v("单向数据流")]),t._v(" "),e("li",[t._v("单一的 store，所有 view 使用单一 store")]),t._v(" "),e("li",[t._v("可预测， state + action => new state")]),t._v(" "),e("li",[t._v("纯函数更新 store")])]),t._v(" "),e("h2",{attrs:{id:"三个核心概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三个核心概念","aria-hidden":"true"}},[t._v("#")]),t._v(" 三个核心概念")]),t._v(" "),e("ul",[e("li",[t._v("store\n"),e("ul",[e("li",[t._v("getState()")]),t._v(" "),e("li",[t._v("dispatch(action)")]),t._v(" "),e("li",[t._v("subscribe(listener)")])])]),t._v(" "),e("li",[t._v("action")]),t._v(" "),e("li",[t._v("reducer")])]),t._v(" "),e("h3",{attrs:{id:"store"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#store","aria-hidden":"true"}},[t._v("#")]),t._v(" store")]),t._v(" "),e("p",[t._v("store 包含三个部分： state、reducer、dispatch")]),t._v(" "),e("p",[t._v("创建 store 的方法")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const store = createStore(reducer)\n")])])]),e("h3",{attrs:{id:"action"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#action","aria-hidden":"true"}},[t._v("#")]),t._v(" action")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("{\n    type: ADD_TODO,\n    text: ''\n}\n")])])]),e("h3",{attrs:{id:"reducer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#reducer","aria-hidden":"true"}},[t._v("#")]),t._v(" reducer")]),t._v(" "),e("p",[t._v("reducer 是一个纯函数，返回一个新的 state。所有的 reducer 会接受到所有的 action，根据 action.type 来判断是否执行。")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("todoApp")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("state "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" initialState"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" action")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("action"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ADD_TODO")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" state"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" state"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("点击 ui 时，产生一个 action，经过 store 时，dispatch 这个 action，reducer 对它进行处理，返回新的 state，然后视图变化。")]),t._v(" "),e("h3",{attrs:{id:"combinereducer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#combinereducer","aria-hidden":"true"}},[t._v("#")]),t._v(" combineReducer")]),t._v(" "),e("p",[t._v("如果有多个 reducer，需要用 combineReducer，返回一个封装后的 reducer。")]),t._v(" "),e("h3",{attrs:{id:"bindactioncreators"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bindactioncreators","aria-hidden":"true"}},[t._v("#")]),t._v(" bindActionCreators")]),t._v(" "),e("p",[t._v("dispatch(action) 结构是一致的，可以将它封装起来。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const boundAddTodo = text => dispatch(addTodo(text))\n")])])]),e("p",[t._v("所以 redux 提供了工具函数 bindActionCreators()。")]),t._v(" "),e("p",[e("img",{attrs:{src:s(207),alt:""}})]),t._v(" "),e("h2",{attrs:{id:"在-react-中使用-redux"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#在-react-中使用-redux","aria-hidden":"true"}},[t._v("#")]),t._v(" 在 react 中使用 redux")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("connect"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" react"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("redux\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),t._v(" extens Components"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 把数据传进来给组件使用")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("mapStateToProps")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("state")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" state"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 只有 a 更新时，组件才更新，不要传递 state，任何更新都会更新")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 把 action 传递进来更新组件")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("mapDispatchToProps")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("dispatch")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("bindActionCreators")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" plusOne"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" minusOne "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dispatch"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("connect")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mapStateToProps"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mapDispatchToProps"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("connect 工作原理：高阶组件")]),t._v(" "),e("p",[e("img",{attrs:{src:s(208),alt:""}})]),t._v(" "),e("p",[t._v("state 变化后传给高阶组件属性，高阶组件再控制更新。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<Provider store={store}>\n    <ConnectedCounter />\n</Provider>\n")])])]),e("p",[t._v("异步 action")]),t._v(" "),e("p",[e("img",{attrs:{src:s(209),alt:""}})]),t._v(" "),e("p",[t._v("Middleware: 截获 action 后，再 dispatch。")]),t._v(" "),e("p",[t._v("返回一个 promise 请求完成完后，resolve 时再 dispatch")]),t._v(" "),e("h3",{attrs:{id:"如何组织-redux-action"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何组织-redux-action","aria-hidden":"true"}},[t._v("#")]),t._v(" 如何组织 Redux Action")]),t._v(" "),e("ol",[e("li",[t._v("所有的 Action 放在一个文件，太多太混乱。")]),t._v(" "),e("li",[t._v("Action，Reducer 分开，实现业务逻辑需要来回切换。")]),t._v(" "),e("li",[t._v("系统中有哪些 Action 不够直观。")])]),t._v(" "),e("p",[t._v("新的方式：单个 action 和 reducer 放在同一个文件。")]),t._v(" "),e("ul",[e("li",[t._v("易于开发，不用 action 和 reducer 文件来回切换。")]),t._v(" "),e("li",[t._v("易于维护，每个 action 都很小，容易理解。")]),t._v(" "),e("li",[t._v("易于测试，每个业务逻辑只需要对应一个测试文件。")]),t._v(" "),e("li",[t._v("易于理解，文件名就是 action 名字，文件列表就是 action 列表。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// type 定义在一起，防止冲突\nimport {\n    COUNTER_PLUS_ONE\n} from './constants'\n// action 和 reducer 定义在一个文件，方便维护\nexport function counterPlusOne(){\n    return {\n        type: COUNTER_PLUS_ONE\n    }\n}\nexport function reducer(state, action){\n    switch(action.type){\n        case COUNTER_PLUS_ONE:\n            return {\n                ...state,\n                count: state.count + 1\n            }\n        default:\n            return state;\n    }\n}\n")])])]),e("p",[t._v("每个 reducer 的 state 有命名空间是 reducer 的名字，所以可以重复。action.type 是不能重复的。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("{\n    todos:{\n        show: true\n    },\n    lists:{\n        show: true\n    }\n}\n")])])]),e("h3",{attrs:{id:"不可变数据-immutable-data"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#不可变数据-immutable-data","aria-hidden":"true"}},[t._v("#")]),t._v(" 不可变数据(immutable data)")]),t._v(" "),e("p",[t._v("不可以直接修改值，而是要复制后修改再返回。")]),t._v(" "),e("p",[t._v("为何需要不可变数据：")]),t._v(" "),e("ol",[e("li",[t._v("性能优化。旧的 state 变化后，只需要比较引用，而不用去比较值。")]),t._v(" "),e("li",[t._v("易于调试和跟踪。可以根据旧 state 和新 state，计算 diff。")]),t._v(" "),e("li",[t._v("易于推测。 store 是由 action 引起的，可以看到之前和后来的 state。")])]),t._v(" "),e("p",[t._v("如何操作不可变数据")]),t._v(" "),e("ol",[e("li",[t._v("原生写法: {...}，Object.assign")]),t._v(" "),e("li",[t._v("借助工具类 immutability-helper：层次比较深时可以用")]),t._v(" "),e("li",[t._v("immer: 性能差些，小型应用可以，会为每个属性增加一个代理")])]),t._v(" "),e("h2",{attrs:{id:"react-router"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react-router","aria-hidden":"true"}},[t._v("#")]),t._v(" react-router")]),t._v(" "),e("p",[t._v("为什么需要路由")]),t._v(" "),e("ul",[e("li",[t._v("单页应用需要页面切换")]),t._v(" "),e("li",[t._v("通过 URL 定位到页面")]),t._v(" "),e("li",[t._v("更有语义的组织资源")])]),t._v(" "),e("p",[t._v("路由实现的基本架构")]),t._v(" "),e("ul",[e("li",[t._v("路由定义 /topic/:id -> Topic")]),t._v(" "),e("li",[t._v("Router")]),t._v(" "),e("li",[t._v("页面")])]),t._v(" "),e("p",[t._v("和服务端路由的对比")]),t._v(" "),e("ul",[e("li",[t._v("声明式路由定义，标记一样")]),t._v(" "),e("li",[t._v("动态路由")])]),t._v(" "),e("p",[t._v("三种路由的实现方式")]),t._v(" "),e("ul",[e("li",[t._v("hash")]),t._v(" "),e("li",[t._v("history")]),t._v(" "),e("li",[t._v("内存路由: url 不会变化，路由存在内存中。")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" MemoryRouter "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"react-router"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("基于路由配置进行资源组织")]),t._v(" "),e("ul",[e("li",[t._v("实现业务逻辑的松耦合")]),t._v(" "),e("li",[t._v("易于扩展、重构和维护")]),t._v(" "),e("li",[t._v("路由层面实现 Lazy Load")])]),t._v(" "),e("p",[t._v("api")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<Link to="/about">about</Link>\n\n// 可以多一个 class，路径一致时可以高亮\n<NavLink to="/about" activeClassName="selected">about</NavLink>\n\n// 弹出提示\n<Prompt when={formIsHalfFilledOut} message="are you sure out?">\n\n// 重定向\n<Route exact path="/" render={()=>{\n    loggedIn ? <Redirect to="/dashboard">\n        : <PublicHomePage>\n}}>\n\n// 如果匹配了，都会显示，没有排他性\n// exact 是否精确匹配\n<Router>\n    <Route exact path="/" component={Home}>\n    <Router path="/news" component={NewsFeed}>\n</Router>\n\n// 有排它性，只显示最先匹配的一个\n<Switch>\n    <Route path="/home" component={Home}>\n    <Router path="/news" component={NewsFeed}>\n</Switch>\n')])])]),e("p",[t._v("通过 url 来传参")]),t._v(" "),e("ol",[e("li",[e("code",[t._v('<Route path="/topic/:id" component={Topic}/>')])]),t._v(" "),e("li",[t._v("会传一个 match 参数"),e("code",[t._v("this.props.match.params")])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('const Topic = ({match}) => (<div>{match.params.id}</div>)\n\n<Route path="/topic/:id" component={Topic}/>\n')])])]),e("p",[t._v("选择 UI 库的考虑因素")]),t._v(" "),e("ol",[e("li",[t._v("组件库是否齐全")]),t._v(" "),e("li",[t._v("样式风格是否符合业务需求")]),t._v(" "),e("li",[t._v("API 设计是否便捷和灵活")]),t._v(" "),e("li",[t._v("技术支持是否完善，issue")]),t._v(" "),e("li",[t._v("开发是否活跃")])])])}),[],!1,null,null,null);a.default=n.exports}}]);