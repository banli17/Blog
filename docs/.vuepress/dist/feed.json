{
    "version": "https://jsonfeed.org/version/1",
    "title": "",
    "home_page_url": "https://www.banli17.com",
    "feed_url": "https://www.banli17.com/feed.json",
    "items": [
        {
            "id": "https://www.banli17.com/",
            "url": "https://www.banli17.com/",
            "title": "Home",
            "summary": "https://www.cnblogs.com/andong2015/p/9981363.html",
            "date_modified": "2020-03-27T03:26:07.947Z"
        },
        {
            "id": "https://www.banli17.com/algo/01_complexity.html",
            "url": "https://www.banli17.com/algo/01_complexity.html",
            "title": "算法复杂度分析",
            "summary": "算法复杂度分析\n时间复杂度\n大 O 表示法\nO(1)\nO(N)\nO(N^2)\nO(log(n))\nO(K^n)\n\n二叉树搜索：前序、中序、后序 O(n)\n图的遍历 O(n)\n搜索算法: DFS、BFS O(n)\n二分查找 O(logn)\n归并排序： O(nlogn)\n\n如何理解算法时间复杂度的表示法 https://www.zhihu.com/question/21387264\nMaster theorem http://en.wikipedia.org/wiki/Mastertheorem(analysisofalgorithms)\n主定理http://zh.wikipedia.org/wiki/%E4%B8%BB%E5%AE%9A%E7%90%86\n",
            "date_modified": "2020-03-27T03:26:07.948Z"
        },
        {
            "id": "https://www.banli17.com/algo/02_%E6%95%B0%E7%BB%84_%E9%93%BE%E8%A1%A8_%E8%B7%B3%E8%A1%A8.html",
            "url": "https://www.banli17.com/algo/02_%E6%95%B0%E7%BB%84_%E9%93%BE%E8%A1%A8_%E8%B7%B3%E8%A1%A8.html",
            "title": "数组、链表、跳表",
            "summary": "数组、链表、跳表\n概念\nArray 数组\n数组的特点是开辟一段内存连续的地址，可以通过硬件内存管理器来访问，它可以保证访问某个元素的时间复杂度都是 O(1)。\n数组存在的问题：\n\n插入时后面元素都要向后移动一位 O(n)\n删除时将后面的元素往前移动一位 O(n)，最后一个设置为 null，唤起内存回收机制\n\nArrayList 支持扩容，如果容量不够，会新建一个 2 倍大小的数组，将旧的数组拷贝过去。删除时也会移动位置。 删除、插入时间复杂度还是 O(n)。\n所以 Array 时间复杂度为：\nprepend    O(1)\nappend O(1)\nlookup O(1)\ninsert O(n)\ndelete O(n)\n\n链表出现是为了解决数组的插入和删除操作时间复杂度高的问题。它的特点是：\n\n有头 head、尾 tail 节点。\n节点有 next 指针指向下一个元素，最后一个元素的 next 指针指向 None。\n\n时间复杂度分析：\n\n插入: 只需要将前一个节点的 next 指向插入元素，插入元素的 next 指针指向下一个节点即可。时间复杂度是 O(1)。\n删除: 前一个节点的 next 指向要删除元素的下个节点。时间复杂度是 O(1)。\n查找：时间复杂度为 O(n)。\n\n双向链表， java 里的 LinkedList\n循环链表\n插入节点： O(1)\n删除节点: O(1)\n查找节点: O(n)\nprepend  O(1)\nappend  O(1)\nlookup  O(n)\ninsert  O(1)\ndelete  O(1)\n\n跳表：为了优化链表的缺陷（随机访问某个元素的时间太长 O(n）)。\n跳表的思想是：\n\n升维思想，多维空间\n空间换时间\n\n建立索引级别\n索引的高度： logn，每层索引遍历的节点个数 3\n在跳表中查询任意数据的时间复杂度就是 O(logn)\n1                        第k 级索引\n1       5\n1   3   5   7\n1 2 3 4 5 6 7 8 9\n\nn/2 n/4 n/8 第 k 级索引节点个数是 n/(2^k)\n假设索引有 h 级，最高级的索引有 2 个节点，n/(2^h) = 2 从而 h = log2(n) - 1\n现实中跳表会随着增加和删除，索引跨步会改变，需要更新索引，维护索引成本高\n空间复杂度\n2 个节点抽 1 个 n/2 n/4 n/8 8 4 2\n3 个抽一个 n/3 n/9 n/27 9 3 1\n空间复杂度 O(n)\n工程中的应用\nLRU Cache - Linked List 146\n题目\n283.Move Zeroes\n题目：https://leetcode-cn.com/problems/move-zeroes/\n\n罗列解法\n\n第一次循环将非 0 移动到前面，第二次循环后面 0\n一次循环，交换位置\n一次循环，将前面的值设置为当前值，当前位置设置为 0\n\n解法1\ndef move_zero(nums):\n    i = 0\n    for l in nums:\n        if l != 0:\n            nums[i] = l\n            i += 1\n    for x in range(i, len(nums)):\n        nums[x] = 0\n    return nums\n\n解法2\ndef move_zero(nums):\n    i = 0\n    for n in range(len(nums)):\n        if nums[n] != 0:\n            nums[n], nums[i] = nums[i], nums[n]\n            i += 1\n    return nums\n\n解法3\ndef move_zero(nums):\n    i = -1\n    for n in range(len(nums)):\n        if nums[n] != 0:\n            i += 1\n            nums[i] = nums[n]\n            if (i != n):\n                nums[n] = 0\n    return nums\n\n11.装最多水问题\n题目：https://leetcode-cn.com/problems/container-with-most-water/\n\n解法\n\n暴力法，两层循环求最大值 O(n^2)，第二层循环从 i+1 开始\n两边收敛(左右夹逼)法，一层循环，两个指针往里收，如果比外层高度小不用考虑，高度大才比较。\n\nclass Solution(object):\n暴力法，时间太长，未通过\n    def maxArea(self, height):\n        oldArea = 0\n        for i in range(0, len(height) - 1):\n            for j in range(i + 1, len(height) - 1):\n                area = min(height[j], height[i]) * (j - i)\n                if area > oldArea:\n                    oldArea = area\n        return oldArea\n\n收敛法\n    def maxArea2(self, height):\n        i = 0\n        j = len(height) - 1\n        r = 0\n        minHeight = 0\n        while i &lt; j:\n            if height[i] &lt; height[j]:\n                minHeight = height[i]\n                i += 1\n            else:\n                minHeight = height[j]\n                j -= 1\n            area = (j - i + 1) * minHeight\n            r = max(area, r)\n        return r\n\ns = Solution()\nprint(s.maxArea2([1,8,6,2,5,4,8,3,7]))\n\n70.爬楼梯问题\n题目：https://leetcode-cn.com/problems/climbing-stairs/\n\n解法\n\n暴力? 不行\n找重复子问题，斐波拉契\n\n递推法，用3个变量不断前进\nclass Solution(object):\n    def climbStairs(self, n):\n        if n &lt;= 2:\n            return n\n        f1, f2, f3 = 1, 2, 3\n        for i in range(3, n+1):\n            f3 = f1 + f2\n            f1 = f2\n            f2 = f3\n        return f3\n\n1.两数之和\nhttps://leetcode-cn.com/problems/two-sum/\n\n暴力法 两层循环\n\nclass Solution(object):\n    def twoSum(self, nums, target):\n        nums_len = len(nums)\n        for i in range(nums_len):\n            for j in range(i+1, nums_len):\n                if target == nums[i] + nums[j]:\n                    return [i, j]\n\nnums = [2, 7, 11, 15]\ntarget = 9\ns = Solution()\nr = s.twoSum(nums, target)\nprint(r)\n\n15. 三数之和\nhttps://leetcode-cn.com/problems/3sum/\n和第1题类似， a + b = -c\n解法：\n- 暴力，三层循环 O(n^3)\n- hash表，O(n^2)， 循环两次，去哈希表里查结果 c\n- 左右夹逼 O(NlogN)，先排序，再 k i j，i j 往中间走\nclass Solution(object):\n    def threeSum(self, nums):\n        list_r = []\n        nums.sort()\n        for i in range(0, len(nums)):\n            for j in range((i + 1), len(nums)):\n                for k in range((j + 1), len(nums)):\n                    if (nums[i] + nums[j] + nums[k] == 0) and ([nums[i], nums[j], nums[k]] not in list_r):\n                        list_r.append([nums[i], nums[j], nums[k]])\n        return list_r\n\n    def threeSum3(self, nums):\n        list_r = []\n        nums.sort()\n        for k in range(0, len(nums)):\n            i = k + 1\n            j = len(nums) - 1\n            while i &lt; j:\n                nums_sum = nums[k] + nums[i] + nums[j]\n                if nums_sum == 0:\nif [nums[i], nums[j], nums[k]] not in list_r:\n                    list_r.append([nums[i], nums[j], nums[k]])\n                    while(i&lt;j and nums[i]==nums[i+1]):\n                        i += 1\n                    while(i&lt;j and nums[j]==nums[j-1]):\n                        j-=1\n                    i += 1\n                    j -= 1\n                elif nums_sum &lt; 0:\n                    i += 1\n                else:\n                    j -= 1\n        return list_r\n\ns = Solution()\n\nr = s.threeSum3([-1,0,1,2,-1,-4])\nprint(r)\n\n资料\n课后作业\n\nhttps://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/\nhttps://leetcode-cn.com/problems/rotate-array/\nhttps://leetcode-cn.com/problems/merge-two-sorted-lists/\nhttps://leetcode-cn.com/problems/merge-sorted-array/\nhttps://leetcode-cn.com/problems/two-sum/\nhttps://leetcode-cn.com/problems/move-zeroes/\nhttps://leetcode-cn.com/problems/plus-one/\n\nLinked List 实战题目\n\nhttps://leetcode.com/problems/reverse-linked-list/\nhttps://leetcode.com/problems/swap-nodes-in-pairs\nhttps://leetcode.com/problems/linked-list-cycle\nhttps://leetcode.com/problems/linked-list-cycle-ii\nhttps://leetcode.com/problems/reverse-nodes-in-k-group/\n\n练习题：\n\nhttps://leetcode.com/problems/reverse-linked-list/ 206\n\n方法 1 迭代法\n方法 2 递归\n方法 3 es6 https://leetcode.com/problems/reverse-linked-list/discuss/313728/Javascript-ES6-less-code-solution\n\nhttps://leetcode.com/problems/linked-list-cycle 141\n\n新建节点进行迭代：https://leetcode.com/problems/swap-nodes-in-pairs/discuss/284762/js-solution-faster-than-100\n\n暴力法，循环等 1s 没相遇就没有环\n将前面节点记录一下，然后查找。\n快慢指针: https://leetcode.com/problems/linked-list-cycle/discuss/371507/Javascript-Solutions-(using-Set-slow-and-fast-pointers)\n\nhttps://leetcode.com/problems/swap-nodes-in-pairs 24\n\n加一个头节点，防止赋值导致节点断裂的问题\n\nhttps://leetcode.com/problems/linked-list-cycle-ii\nhttps://leetcode.com/problems/reverse-nodes-in-k-group/\n",
            "date_modified": "2020-03-27T03:26:07.969Z"
        },
        {
            "id": "https://www.banli17.com/algo/03_%E6%A0%88_%E9%98%9F%E5%88%97_%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97_%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97.html",
            "url": "https://www.banli17.com/algo/03_%E6%A0%88_%E9%98%9F%E5%88%97_%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97_%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97.html",
            "title": "栈、队列、优先队列、双端队列",
            "summary": "栈、队列、优先队列、双端队列\n概念\nStack 先进后出，添加，删除都是 O(1)，查询是 O(N)\nQueue 先进先出，添加、删除都是 O(1)，查询是 O(N)\n工程中一般用 双端队列 Deque(Double-End Queue)，头尾都可以出和入。添加删除都是 O(1)，查询是 O(N)。\n工程实现\n查询 Stack 等接口实现\ngoogle 搜索 stack java 12 、java source stack download/source java stack\n栈的方法\nclass Stack{\n    boolean empty()\n    E       peek()   查看栈顶元素\n    E       pop()\n    E       push(E item)\n    int     search(Object o)\n}\n\nqueue 是一个接口\ninterface Queue{\n    // 有异常会抛出异常\n    add()\n    remove()\n    element()\n\n    // 有异常会返回一个值\n    offer(e)\n    poll()\n    peek()\n}\n\n优先队列 PriorityQueue\n插入操作 O(1)\n取出操作 O(logN) 好处: 按照元素的优先级取出\n底层具体实现多种多样和复杂，可以是 heap、bst、treap\nVector 可变数组\n参考链接\n\nJava 的 PriorityQueue 文档\nJava 的 Stack 源码\nJava 的 Queue 源码\nPython 的 heapq\n高性能的 container 库\n\n预习题目\nhttps://leetcode-cn.com/problems/valid-parentheses/\nhttps://leetcode-cn.com/problems/min-stack/\n实战题目\nhttps://leetcode-cn.com/problems/largest-rectangle-in-histogram\nhttps://leetcode-cn.com/problems/sliding-window-maximum\n课后作业\n 用 add first 或 add last 这套新的 API 改写 Deque 的代码\n 分析 Queue 和 Priority Queue 的源码\nhttps://leetcode.com/problems/design-circular-deque\nhttps://leetcode.com/problems/trapping-rain-water/\n说明：改写代码和分析源码这两项作业，同学们需要在第 1 周的学习总结中完成。如果不熟悉 Java 语言，这两项作业可选做。",
            "date_modified": "2020-03-27T03:26:07.972Z"
        },
        {
            "id": "https://www.banli17.com/algo/array.html",
            "url": "https://www.banli17.com/algo/array.html",
            "title": "数组",
            "summary": "数组\n数组在内存一般是连续存储的。\n操作\n\n获取：通过 Memory Controller(内存管理器)访问任何下标位置的元素为 O(1)。\n插入: 因为要保证是连续的，所以插入后，后面的元素要往后面移动。时间复杂度是 O(n) 的。\n删除: 也是 O(n) 的。\n",
            "date_modified": "2020-03-27T03:26:07.973Z"
        },
        {
            "id": "https://www.banli17.com/algo/dynamic-program.html",
            "url": "https://www.banli17.com/algo/dynamic-program.html",
            "title": "动态规划",
            "summary": "动态规划\n\n递归 + 记忆化 -&gt; 递推\n状态的定义：opt[n]、dp[n]、fib[n]\n状态转移(dp)方程：opt[n] = best_of(opt[n-1], opt[n-2],...)\n最优子结构\n\nDP vs 回溯 vs 贪心\n\n回溯(递归) - 重复计算\n贪心 - 永远局部最优\nDP - 记录局部最优子结构/多种记录值\n\n斐波那契数列（Fibonacci sequence）\n如果直接进行递归，算法复杂度是 O(2^n)。使用递归 + 记忆法，从上向下递归计算，算法复杂度是 O(2n)。使用递推法，直接从下向上计算，算法复杂度是 O(n)。\nfunction fib(n, c = [0, 1]) {\n    if (n &lt;= 1) return c[n];\n\n    for (let i = 2; i &lt;= n; i++) {\n        c[i] = c[i - 1] + c[i - 2];\n    }\n    return c[n];\n}\n\n棋盘路径问题\n\n棋盘从 start 到 end 共有多少种走法? 走动方向只能是右边或下边，中级有石头。\n\n一个格子的走法 = 它下面格子的走法 + 它右边格子的走法。\n最下面格子，和最右边格子的走法都是 1。石头格子的走法是 0。\n从最右下角，开始往左上角递推。\n\nlet stone = {\n    1: [2, 6],\n    2: [1, 3, 4],\n    3: [5],\n    4: [2, 5, 7],\n    5: [3],\n    6: [1, 5]\n};\n\n/**\n 创建格子\n @param {*} m 格子行数\n @param {*} n 格子列数\n */\nfunction createMap(m, n) {\n    let steps = [];\n    for (let i = 0; i &lt;= m; i++) {\n        for (let j = 0; j &lt;= n; j++) {\n            if (!steps[i]) steps[i] = [];\n            stepsi = i == 0 || j == 0 ? 1 : 0;\n        }\n    }\n    return steps;\n}\n\n/**\n 检测是否是石头\n */\nfunction isStone(stone, i, j) {\n    return stone &amp;&amp; stone[i] &amp;&amp; stone[i].includes(j);\n}\n\n/**\n 动态规划走法\n */\nfunction step(steps, m, n) {\n    for (let i = 1; i &lt;= m; i++) {\n        for (let j = 1; j &lt;= n; j++) {\n            if (isStone(stone, i, j)) {\n                stepsi = 0;\n            } else {\n                stepsi = stepsi - 1 + stepsi;\n            }\n        }\n    }\n    return steps;\n}\n\n爬楼梯问题\nleetcode 70 题：楼梯一次只能爬 1 或者 2 步，第 n 层有多少种爬法。\n其实就是一个斐波那契问题。\nvar climbStairs = function(n) {\n    if (n &lt;= 2) return n;\n    let all = [0, 1, 2];\n    for (let i = 3; i &lt;= n; i++) {\n        all[i] = all[i - 1] + all[i - 2];\n    }\n    return all[n];\n};\n\n三角形最小路径和\n练习地址\n\nhttps://github.com/banli17/practice/tree/master/algo\n",
            "image": "https://www.banli17.com/imgs/dynamic-program-1.png",
            "date_modified": "2020-03-27T03:26:07.988Z"
        },
        {
            "id": "https://www.banli17.com/algo/",
            "url": "https://www.banli17.com/algo/",
            "title": "简介",
            "summary": "简介\n数据结构与算法是一块非常不太好学会的内容，平时工作中业务开发也不太会用到，但是它是一门非常重要的基本功。学习它没有其它好的方法，只有反复的练习，加深记忆。\n学习资料\n\n极客时间：数据结构与算法之美\n极客时间：算法面试通关 40 讲\n\n学习方法\n职业训练：拆分知识点、刻意练习、反馈(学习别人、被别人指点)\n切题四件套(单个题目)：\n\nClarification: 多看题目，反复沟通，保证理解正确\nPossible solutions: 列出所有可能的解法\n\ncompare(time/space): 比较时空复杂度\noptimal(加强)：找最优\n\nCoding 多些\nTest Case: 测试用例\n\n五步刷题法：\n\n第一遍： 5 分钟读题+思考，没思路就直接看解法：注意！多解法，比较解法优劣。背诵\n第二遍: 马上自己写 -&gt; leetcode 提交；各种解法比较(执行时间)、体会 -&gt; 优化！\n第三遍: 过了一天后，练习\n第四遍 : 够了一周后，练习\n第五遍 : 面试前，练习\n\n误区： 不要只练习一遍\nhttps://naotu.baidu.com/file/b832f043e2ead159d584cca4efb19703?token=7a6a56eb2630548c\nhttps://naotu.baidu.com/file/0a53d3a5343bd86375f348b2831d3610?token=5ab1de1c90d5f3ec\n编辑器、代码风格\n快捷键，google 代码风格 ，自顶向下代码",
            "date_modified": "2020-03-27T03:26:07.990Z"
        },
        {
            "id": "https://www.banli17.com/browser/",
            "url": "https://www.banli17.com/browser/",
            "title": "大前端笔记",
            "summary": "大前端笔记\n第一阶段\n木桶理论\n基础：印记中文\n简历写详细，如熟悉某某原理、渲染机制",
            "date_modified": "2020-03-27T03:26:07.990Z"
        },
        {
            "id": "https://www.banli17.com/algo/heap-stack.html",
            "url": "https://www.banli17.com/algo/heap-stack.html",
            "title": "堆和栈",
            "summary": "堆和栈\n\nstack 数组或单双链表 查 O(n) 插入，删除 O(1)\nqueue 数组或单双链表 查 O(n) 插入，删除 O(1)\n\nhttp://www.bigocheatsheet.com/ 罗列了各种数据结构和算法时间复杂度\nBig O Cheat Sheet\n\nhttps://leetcode.com/problems/backspace-string-compare/description/ 844\nhttps://leetcode.com/problems/implement-queue-using-stacks/solution/ 232\nhttps://leetcode.com/problems/implement-stack-using-queues/description/ 225\n\n只用栈实现队列，或只用队列实现栈\n用 input 和 output，两个 stack。如果要出队，就 pop 从 output 里出、入队 push 到 input 里。output 如果没有，就将 input 里的数据移到 output，peek 用于查看末尾的元素，看 output。\n\nhttps://leetcode.com/problems/valid-parentheses/description/ 20\n\n使用栈\n\n左 push\n右 peek\n最终看是否 empty\n\ndo while 循环 replace () [] {}\n",
            "date_modified": "2020-03-27T03:26:07.991Z"
        },
        {
            "id": "https://www.banli17.com/algo/priority-queue.html",
            "url": "https://www.banli17.com/algo/priority-queue.html",
            "title": "优先队列",
            "summary": "优先队列\n优先队列(PriorityQueue)\n正常⼊、按照优先级出\n实现可以是\n\n堆\n\n二叉堆 查找是 O(1)，删除、插入是 O(logn)，合并是 O(n)\nfibonacci 堆 查、插入、合并都是 O(1)，删除是 O(logn)\n\n二分查找树\n\n复杂度\n题目\n\nhttps://leetcode.com/problems/kth-largest-element-in-a-stream\nhttps://leetcode.com/problems/sliding-window-maximum/\n",
            "date_modified": "2020-03-27T03:26:07.992Z"
        },
        {
            "id": "https://www.banli17.com/algo/tree.html",
            "url": "https://www.banli17.com/algo/tree.html",
            "title": "树和图",
            "summary": "树和图\n理论\n链表是特殊的树(后继节点可以多个)，树是特殊的图(可以乱指)。\n二叉搜索树(binary search tree)：有序二叉树、排序二叉树，是指一棵空树或具有下列性质的二叉树：\n\n左子树上所有节点的值都小于它的根节点的值。\n右子树上所有节点的值都大于它的根节点的指。\nrecursively，坐、右子树也分别为二叉搜索树。\n\n时间复杂度是O(logN)，最差是O(n)，比如只有右子节点，就是一个链表了。\n\n验证二叉排序树\nvalidate BST，leetcode 98 题。\n\nin-order 中序遍历（左、根、右），应该是一个升序的 array。\n递归\n",
            "image": "https://www.banli17.com/imgs/2019-12-23-00-39-40.png",
            "date_modified": "2020-03-27T03:26:07.992Z"
        },
        {
            "id": "https://www.banli17.com/browser/gc.html",
            "url": "https://www.banli17.com/browser/gc.html",
            "title": "垃圾回收机制",
            "summary": "垃圾回收机制",
            "date_modified": "2020-03-27T03:26:07.993Z"
        },
        {
            "id": "https://www.banli17.com/browser/macro.html",
            "url": "https://www.banli17.com/browser/macro.html",
            "title": "宏观视角下的浏览器",
            "summary": "宏观视角下的浏览器\nChrome 架构\n查看 Chrome 进程情况： Chrome 又上角选项 -&gt; 更多工具 -&gt; 任务管理器。\n并行处理：同一时刻处理多个任务。举例:\nA = 1+1\nB = 2*3\nC = A*B\n\n单线程从上到下计算，多线程同时计算 A、B，最后计算 C，性能提高了。\n线程：不能单独存在，由进程来启动和管理。\n进程：一个进程就是一个程序的运行实例，启动程序时，操作系统会为程序分配内存，用来存放代码、运行时数据和一个执行任务的主线程，这样的一个运行环境叫做进程。\n线程依附于进程，而进程中使用多线程能并行处理提升运算效率。\n关系：\n\n进程中任意线程出错，都会导致整个进程崩溃。如 B 计算 1/0 出错。\n线程之间共享进程的数据。\n进程关闭后，操作系统回收所占用的内存。\n进程之间的内容相互隔离。一个进程崩溃，不会影响其它进程。进程通信需要 IPC 机制。\n\n单进程浏览器：网络、插件、js 运行环境、渲染引擎和页面都在一个进程。问题：\n\n不稳定\n不流畅\n不安全：运行插件可以获取操作系统的任意资源。恶意插件可以释放病毒，盗取密码。页面脚本也可以通过浏览器漏洞获取系统权限。\n\n多进程浏览器\n\n解决不稳定：多进程\n不流畅：js 运行在渲染进程中，即使阻塞进程，也只影响当前渲染页面，而不会影响浏览器和其它页面。\n安全问题：安全沙箱，即沙箱里的程序可以运行，单不能在硬盘上写入数据，也不能读取敏感位置的数据。插件进程和渲染进程在沙箱中。\n目前多进程架构\n\n浏览器进程： 负责界面显示、用户交互、子进程管理、提供存储等功能。\n渲染进程：将 html/css/js 转为用户可交互的网页，排版引擎 Blick 和 js 引擎 v8 都在该进程中，默认 Chrome 会给每个同站点页面共享一个渲染进程(process-per-site-instance，查看更多)。运行在沙箱模式下。\nGPU 进程: 初衷是为了实现 3D CSS，后来网页、Chrome UI 界面都采用 GPU 来绘制。\n网络进程\n插件进程\n\n多进程模型的问题：\n\n更高的资源占用。每个进程都包含公共基础结构的副本(如 js 运行环境)。\n更复杂的体系架构：浏览器各模块之间耦合性高，扩展性差。\n\n面向未来服务的架构\n2016 年,Chrome 提出了 面向服务的架构(Services Oriented Architecture，简称 SOA)。将原来各种模块重构为独立的服务，每个服务都可以在独立的进程中运行，访问服务必须使用定义好的接口，通过 IPC 通信，从而构建一个更内聚、松耦合、易于维护和扩展的系统。\n\n同时，如果资源受限制的设备上，Chrome 会整合服务到一个进程中，节省内存。\n\nv8 官网\nchrome 设计文档\n\nTCP 协议\nFP(first paint): 从页面加载到首次开始绘制的时长。这个指标直接影响用户跳出率。\n大数据拆成小数据包来传输。数据包从 A 到 B 传输过程：\n\nip: 数据包要在互联网传输，就要符合网际协议(internet protocol, ip)标准。\n数据包交给网络层，网络层给数据包附加 ip 头， 包括 ip 版本， 源 ip ，目标 ip，生存时间。\n通过物理网络传输给 B。\nB 网络层拆开数据包 ip 头，将数据交给应用层。\n\nip 将数据包发给指定的电脑。\nUDP（user datagram protocol) 用户数据包协议，通过端口号将数据给指定程序。\nUDP 可以校验数据是否正确，但是对错误的包，不提供重发机制，不知道数据是否到达 B，也不能重组包。传输速度快，适合在线视频，互动游戏。\n但是有些数据需要安全的到达，所以有了 TCP。\nTCP: transmission control protocol，传输控制协议，面向连接、可靠的、基于字节流的传输层协议。\n特点：\n\n对于数据包丢失，重传机制\n数据包排序机制，将乱序数据包重组为完整的包\n\n完整的 TCP 生命周期：\n\n连接三次握手 时序图\n传输数据\n断开：四次挥手\n\nHTTP 请求流程\n浏览器发起 http 请求过程：\n\n构建请求： 构建请求头信息\n\nGET /index.html HTTP1.1\n\n查找缓存：有缓存则直接返回该资源的副本，并直接结束请求。好处：减少服务器压力，提升资源加载速度。\n缓存查找失败，开始网络请求。\n为数据传输准备 ip 和端口。\n\nDNS (domain name system)将 url 映射成 ip。\n有 DNS 数据缓存服务\n得到 ip\n根据 url 得到端口号，默认 80\n\n等待 TCP 队列，chrome 默认同一个域名最多 6 个 TCP 连接。如果小于 6 则建立 TCP 连接。\n建立 TCP 连接。\nTCP 传输数据，即发送 HTTP 请求，包括请求方法、url，http 版本、请求头、请求体(post)。http 请求报文格式：\n\n服务器处理 HTTP 请求，返回响应，包括协议版本、状态码、服务器信息等。\n\n断开连接：一旦服务器返回请求数据，就要关闭 TCP 连接，不过可以在头信息中加入 Connection: Keep-Alive 保持连接复用 TCP，这样可以省去下次连接的开销。\n重定向，如果状态码是 301 ，就是告诉浏览器要重定向，浏览器获取响应头的 Location，重新导航这个地址。\n\n为什么很多站点第二次打开速度会很快？\n因为有缓存: DNS 缓存，页面缓存。\n缓存查找过程：\n服务器返回 http 响应给浏览器，浏览器通过响应头 Cache-Control 设置是否缓存资源，时长通过 Cache-Control 里的 Max-age 设置。\nCache-Control: Max-age=2000\n\n如果缓存资源未过期，则直接返回，如果过期了，则发起网络请求，并在 HTTP 请求头带上\nIf-None-Match:&quot;4f80f-13c-3a1xb12a&quot;\n\n服务器收到后，会根据 If-None-Match 值判断请求的资源是否有更新。\n没更新就返回 304，表示该缓存可以继续用。\n有更新就返回资源给浏览器。\n登录状态如何保持？\n用户 post 账户密码\n服务器返回头 Set-Cookie: UID=3431uad;给浏览器。\n浏览器会保存到本地，再次访问时，会将Cookie: UID=3431uad;发送给服务器。\n服务器根据 Cookie 判断用户是否登录。\ndisk：新 tab 打开时，都是 disk；html 文件都是 disk\nmemory：新 tab 再次使用缓存时，是 memory\n完整的示意图\n\nhttp 请求的 8 个阶段: 构建请求、查找缓存、准备 IP 和端口、发起 TCP 连接、发送 HTTP 请求、服务器处理请求、服务器返回请求和端口连接。\n如果一个页面的网络加载时间过久，你是如何分析卡在哪个阶段的?\nhttps://developers.google.com/web/tools/chrome-devtools/network/reference#timing-explanation 举个例子 Content Download 如果太长，很有可能是下载的资源太大，但也有可能是网络慢导致的下载太慢，简单计算一下，在例如 Waiting (TTFB) 这个太长的话，有可能是网络慢，或者就是 后端处理时间过长导致的，至少可以排查掉前端原因，还有很多，例如 DNS lookup 等，但是最终要确认具体哪里慢，最好是结合系统日志去分析\n导航流程\n从输入 URL 到页面展示，这中间发生了什么？\n\n浏览器进程收到用户输入的 URL 请求，将该 URL 转发给网络进程。\n网络进程发起 URL 请求。\n网络进程收到响应头数据，解析并将数据转发给浏览器进程。\n浏览器进程收到网络进程的响应头数据后，发送提交导航(CommitNavigation)消息(会携带响应头等基本信息)到渲染进程。\n渲染进程收到消息后，开始准备接收 HTML 数据，接收方式是直接和网络进程建立数据管道。\n渲染进程向浏览器进程确认提交，告诉浏览器已经准备好接收和解析数据。\n浏览器进程收到渲染进程提交文档的消息后，移除之前旧文档，更新浏览器进程中的页面状态。\n\n其中，用户发起 url 请求到页面开始解析的过程，叫做导航。\n\n用户输入\n\n输入搜索内容: 和浏览器默认搜索引擎合成 URL。\n输入请求 URL: 加协议等，合成完整的 URL。\n\n回车\n\n清理旧页面， beforeunload 事件可以做数据清理或询问用户是否要离开。\n标签页图标变成加载状态，页面还是之前的页面，需要等提交文档阶段，页面内容才会替换。\n\nURL 请求过程\n\n浏览器进程通过 IPC 把 URL 发给网络进程\n\n网络进程查找缓存，有则直接返回，没有则网络请求(DNS 解析，如果是 HTTPS 还要建立 TLS)\n\n利用 IP 和服务器建立 TCP 连接，浏览器端构建请求行、请求头等信息，发给服务器\n\n服务器收到后，生成响应数据，发给网络进程，网络进程收到响应行和响应头开始解析\n\n处理状态码\n\n重定向： 301 或 302，读 Location，重新导航请求\n200 浏览器继续处理请求\n\n处理响应类型\n\nContent-Type: 响应体数据是什么类型\n\napplication/octet-stream: 字节流，按下载类型处理，同时该 url 请求导航流程结束\ntext/html: 继续导航\n\n准备渲染进程：\n\n每个标签对应一个渲染进程（左键点击才算，右键新开会新开渲染进程)\n同一站点(same-site)： 根域名、协议相同。新页面会复用父页面的渲染进程,process-per-site-instance。\n使用 noopener noreferrer 就是告诉浏览器，新打开的子窗口不需要访问父窗口的任何内容，这是为了防止一些钓鱼网站窃取父窗口的信息。会新开渲染进程\n\n提交文档，浏览器进程将网络进程数据交给渲染进程\n\n浏览器进程收到网络进程的响应头数据后，向渲染进程发起提交文档的消息。\n渲染进程收到消息，会和网络进程建立传输数据的管道。\n数据传输完成，渲染进程返回确认提交消息给浏览器进程。\n浏览器进程收到消息，更新浏览器界面状态，包括安全状态、地址栏 URL、前进后退的历史状态，并更新 web 页面。\n\n渲染阶段：渲染进程开始页面解析和子资源加载\n\n渲染流程\n\n深入了解现代 Web 浏览器（第 1 部分）\n\nopenId omvMN5KyrfvTDD0iQGbhY8M_sZmg\nuserInfo {&quot;nickName&quot;:&quot;板栗&quot;,&quot;gender&quot;:1,&quot;language&quot;:&quot;zhCN&quot;,&quot;city&quot;:&quot;Qianjiang&quot;,&quot;province&quot;:&quot;Hubei&quot;,&quot;country&quot;:&quot;China&quot;,&quot;avatarUrl&quot;:&quot;https://wx.qlogo.cn/mmopen/vi32/DYAIOgq83epCVsZFRYQ0yGjw5HMorkBJFbub7RwatYdSYS6W0MWsmACPfSrZlUVfic6ibBRtNbG5Gd3IsAZk7F9Q/132&quot;}",
            "image": "https://www.banli17.com/imgs/1-1-0.png",
            "date_modified": "2020-03-27T03:26:07.996Z"
        },
        {
            "id": "https://www.banli17.com/browser/v8.html",
            "url": "https://www.banli17.com/browser/v8.html",
            "title": "v8 工作原理",
            "summary": "v8 工作原理\n垃圾回收\n栈中的垃圾回收\n执行栈中有一个记录当前执行状态的指针（ESP)，指向栈顶的函数执行上下文，函数执行完成后，ESP 会下移，函数执行上下文就是无效内存了，如果调用新函数，这块内存会被覆盖掉，用来存放新函数的执行上下文。\n所以说，当一个函数执行完后，JS 引擎会通过向下移动 ESP 来销毁该函数保存在栈中的执行上下文。\n堆中的垃圾回收\n堆中的垃圾回收，就用到了 JS 的垃圾回收器。\n代际假说有两个特点：\n\n大部分对象在内存中存在的时间很短。\n不死的对象，会存活的更久。\n\nV8 将堆分为新生代和老生代两个区域，新生代存放生存时间短的对象，老生代存放生存时间长的对象。\n新生区通常只支持 1-8M 容量，老生区支持的容量大。V8 分别堆这两个区使用了不同的垃圾回收器。\n\n副垃圾回收器，负责新生代的垃圾回收。\n主垃圾回收器，负责老生代的垃圾回收。\n\n垃圾回收器工作流程\n垃圾回收器的工作流程是一致的：\n\n标记空间中活动对象和非活动对象。\n回收非活动对象所占用的内存。即清理标记为非活动对象的内存。\n内存整理，通常垃圾回收后，内存会变得不连续，有内存碎片。\n\n副垃圾回收器\n副垃圾回收器主要负责新生区的垃圾回收，通常小的对象分配到这里。\n新生代中用 Scavenge 算法来处理，即把新生区对半分为两个区域，一般是对象区域，一半是空闲区域。新加入的对象会存放在对象区域，当对象区域快满时，就需要一次垃圾回收。\n垃圾回收过程中，首先标记对象区域中的垃圾，标记完成后，进行垃圾清理阶段，副垃圾回收器会把存活的对象复制到空闲区域，同时将它们有序的排列起来，所以这个复制过程相当于是内存整理。\n复制完成后，对象区域和空闲区域进行反转，这种角色反转的操作能让新生代的两块内存可以无限重复使用下去。\n因为 Scavenge 算法，每次要复制存活对象到空闲区域，复制需要时间成本，所以如果新生区空间太大，每次清理需要很长时间，为了执行效率，新生区会设置的比较小。\n但是由于新生区空间不大，会很快被装满，所以 JS 引擎采用对象晋升策略，即经过两次垃圾回收还存活的对象，会被移动到老生区中。\n主垃圾回收器\n主垃圾回收器负责老生区的垃圾回收，除了新生区晋升的对象，一些大的对象也会直接分配到老生区，所以老生区中的对象有两个特点：占用空间大、存活时间长。\n如果使用 Scavenge 算法，复制大对象会花很长时间，同时还会浪费一半的空间。所以主垃圾回收器采用的是标记-清除(Mark-Sweep)算法。\n\n标记过程，从根元素开始，进行递归遍历，能到达的元素就标记为活动对象，没有到达的就是垃圾数据。\n垃圾清除\n\n但是上面的标记-清除算法，如果多次执行后，会有大量的内存碎片，会导致大对象无法分配到足够的连续内存。所以有产生了一个新的算法标记-整理(Mark-Compact)，是直接将活动对象从开始进行排列，然后将边界后面的内存一次清空。\n全停顿\nJS 是运行在主线程上的，一旦执行垃圾回收算法，JS 脚本会停止执行，等待垃圾回收完毕后再恢复执行，这种行为叫做全停顿(Stop-The-World)。\n如果堆中数据 1.5G，V8 清理垃圾的时间会超过 1s。这样会让应用的性能和响应能力下降。新生代小，影响不大，但是老生代就不能这样了，所以为了降低卡顿，V8 将标记过程分为一个个子标记过程，同时让垃圾回收标记和 JS 应用逻辑交替执行，直到标记阶段完成，这个算法叫增量标记算法(Incremental Marking)。\n新生代和老生代的标记过程是同一过程，之后新生代把存活的数据移动到空闲区，老生代把死去的对象加到空闲列表中。\nV8 还维护了一个空闲列表，也就是没有被使用的空闲空间列表，垃圾清理过程就是把没有标记的添加到空闲列表中！\n增量标记会受到中间穿插的 js 应用逻辑影响么？会造成标记结果不全或者错误么？\n不全没关系，新产生的垃圾下次再回收，分配内存使用空闲列表里面的。\n怎么看内存泄露\n\n一般是感官上的长时间运行页面卡顿，猜可能会有内存泄漏。\n使用 chrome 的 Performance 面板，观察内存变化 如何多次垃圾回收后，整体趋势是向上，就存在内部泄漏的可能！\n确定不使用的临时变量置为 null，当前 es6 普及场景下少使用闭包也是一种方法。\n\n可能导致内存泄露\n\n全局变量过大\n定时器没有清除\n闭包\nDOM 引用\n",
            "date_modified": "2020-03-27T03:26:07.998Z"
        },
        {
            "id": "https://www.banli17.com/css/",
            "url": "https://www.banli17.com/css/",
            "title": "css 常用",
            "summary": "css 常用\n滚动条样式\n::-webkit-scrollbar {\n    display: none;\n}\n",
            "date_modified": "2020-03-27T03:26:08.010Z"
        },
        {
            "id": "https://www.banli17.com/css/compatible.html",
            "url": "https://www.banli17.com/css/compatible.html",
            "title": "兼容性问题",
            "summary": "兼容性问题\nline-height android 不居中\nhttps://www.zhihu.com/question/39516424\ncss reset\nhttp://meyerweb.com/eric/tools/css/reset/\n多行文字显示几行\n文本超出 ...，只是 firefox 上文字会被截断。\n.box {\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    -o-text-overflow: ellipsis;\n    overflow: hidden;\n}\n\n.box(@n) {\n    display: -webkit-box;\n    -webkit-line-clamp: @n;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n}\n\n关于文字内容溢出用点点点(…)省略号表示\n\n滚动条隐藏\n&amp;::-webkit-scrollbar {\n    display: none;\n}\n\nvivo banner 没有显示，加个 width:100% 可以\niphone 6p 10 系统，卡片商品名称内容不显示，\n",
            "date_modified": "2020-03-27T03:26:08.025Z"
        },
        {
            "id": "https://www.banli17.com/css/less.html",
            "url": "https://www.banli17.com/css/less.html",
            "title": "less 总结",
            "summary": "less 文档阅读总结\n总览\nless 的概念包括：\n\n变量 (Variables)\n\n常规使用\n可变插值： 在选择器名、属性名、url、@import 里使用\n将属性当作变量 $props\n当作变量使用 @@\n\n父选择器 (Parent Selector)\n\n&amp; 是所有父级的引用\n可以多个&amp;\n逗号选择器组合爆炸\n\n扩展 (Extend)\n合并 (Merge)\n混合 (Minxins)\nCSS 守卫 (CSS Guards)\n分离规则集(detached ruleset)\n@import 规则\n@plugin 规则\n映射 (Maps)\n\n注释\n/* 我是被编译的，会保留 */\n// 不会被保留\n\n变量\n总览\n@color-default: red;\n@color-draken: darken(@color-default, 10%); // less 函数 darken\n\n.box {\n    color: @color-default;\n}\n\n可变插值\n可以在选择器名称、属性名、URL 和@import 里使用。\n// 1. 选择器\n@my-selector: banner;\n.@{my-selector} {\n}\n// 编译为\n.banner {\n}\n\n// 2.路径\n@imgs: \"../img\";\nbody {\n    background: url(\"@{imgs}/1.png\");\n}\n\n@themes: \"../src/theme\";\n@import \"@{themes}/a.less\";\n\n// 3.属性名\n@property: color;\n.widget {\n    @{property}: red;\n}\n\n可变变量\n使用另一个变量定义变量的名称。\n@primary: green;\n.section {\n    @color: primary;\n    .element {\n        color: @@color;\n    }\n}\n\n// 编译后\n.section .element {\n    color: green;\n}\n\n懒声明\n变量不需要在使用前声明。\n// 1\n.lazy-eval {\n    width: @var;\n}\n\n@var: @a;\n@a: 9%;\n\n// 2\n.lazy-eval {\n    width: @var;\n    @a: 9%;\n}\n\n@var: @a;\n@a: 100%;\n\n// 都编译为， 有作用域概念，由 css 定义的最后一个属性确定\n.lazy-eval {\n    width: 9%;\n}\n\n将属性当作变量\n使用 $prop 语法将属性当作变量。\n.a {\n    color: red;\n    background: $color;\n}\n\n默认变量\n// library\n@base-color: green;\n@dark-color: darken(@base-color, 10%);\n\n// use of library\n@import \"library.less\";\n@base-color: red; // 会覆盖前面的变量\n\n父选择器\n通过 &amp; 可以引用父选择器。\n.button {\n    &amp;:hover {\n        // .button:hover\n    }\n    &amp;-ok {\n        // .button-ok\n    }\n    &amp;-cancel {\n    }\n    &amp; &amp; {\n        // .button .button\n    }\n    &amp; + &amp; {\n        // .button + .button\n    }\n    &amp;&amp; {\n        .button.button;\n    }\n    &amp;,\n    &amp;ish {\n        .button, .buttonish;\n    }\n}\n\n&amp; 表示所有的父元素，而不是最近的一个。\n.grand {\n    .parent {\n        &amp; > &amp; {\n            color: red;\n        }\n    }\n}\n// 编译后\n.grand .parent > .grand .parent {\n    color: red;\n}\n\n更改选择器顺序\n.a {\n    .b {\n        .c &amp; {\n            color: red;\n        }\n    }\n}\n// 编译后\n.c .a .b {\n    color: red;\n}\n\n组合爆炸\n会给逗号分割列表列出所有可能。\np,\na {\n    &amp; + &amp; {\n        color: red;\n    }\n}\n// 编译后\np + p\np + a\na + p\na + a\n\n扩展(Extend)\n它将合并的选择器和其引用的选择器合并。\nnav ul {\n    &amp;:extend(.inline);\n    color: red;\n}\n.inline {\n    background: blue;\n}\n// 编译后\nnav ul {\n    color: red;\n}\n.inline,\nnav ul {\n    color: red;\n}\n\n混合\n// 混合\n.border {\n    border: 1px solid red;\n}\n.box {\n    color: @color-default;\n    .border;\n}\n\n// 混合 - 可带参数\n.border02(@borderwidth) {\n    border: solid yellow @border_width;\n}\n\n.test {\n    .border_02(30px);\n}\n\n// 混合 - 默认带值\n.border03(@borderwidth:10px) {\n    border: solid yellow @border_width;\n}\n\n.text {\n    .border_03();\n}\n\n// 混合的例子\n.border_radius(@radius: 5px) {\n    -webkit-border-radius: @radius;\n    -ms-border-radius: @radius;\n    border-radius: @radius;\n}\n\n匹配模式\n// 普通\n.sanjiao {\n    width: 0;\n    height: 0;\n    overflow: hidden;\n\n    border-width: 10px;\n    border-color: red transparent transparent transparent; // 朝下\n    border-style: solid; // ie不兼容，需要改成 solid dashed dashed dashed\n}\n\n// 匹配模式\n.triangle(top, @w:5px, @c:#ccc) {\n    border-width: @w;\n    border-color: transparent transparent @c transparent;\n    border-style: dashed dashed solid dashed;\n}\n.triangle(bottom, @w:5px, @c:#ccc) {\n    border-width: @w;\n    border-color: @c transparent transparent transparent;\n    border-style: solid dashed dashed dashed;\n}\n.triangle(@_, @w:5px, @c:#ccc) {\n    // 默认带上这个\n    width: 0;\n    height: 0;\n    overflow: hidden;\n}\n.sanjiao {\n    .triangle(bottom, 100px);\n}\n\n// 匹配模式 - 定位\n.pos(r) {\n    position: relative;\n}\n.pos(f) {\n    position: fixed;\n}\n.pos(a) {\n    position: absolute;\n}\n.pipe {\n    .pos(f);\n}\n\n运算\n@test: 100px;\n.box {\n    width: @test -10 * 2;\n}\n\n嵌套规则\n.list {\n    ul {\n        li {\n            a {\n                color: red;\n            }\n        }\n    }\n}\n\n// &amp; 表示上一层选择器\na {\n    &amp;:hover {\n        // 表示 a:hover\n        color: red;\n    }\n}\n\n// .title\n//.titlenav 可以写成 &amp;nav\n\narguments\n.border(@w:20px,@c:red,@type:solid) {\n    border: @arguments;\n}\n\n避免编译\n.test {\n    width: ~\"calc(300px -10px)\";\n    // calc 是浏览器计算的，而不是css\n}\n\nimportant\n.test {\n    .border() !important; // 里面所有的元素都会加 !important\n}\n\ncss 重构规范\n\n供 js 使用，非样式类，使用js-前缀。\n\n&lt;a href=&quot;/login&quot; class=&quot;js-login&quot;&gt;&lt;/a&gt;\n\n工具类 Utilities，必须使用驼峰命名，前缀使用u-，比如 floats, containing floats, vertical alignment, text truncation，clearfix 等。可以跟组件类一起使用。\n\n&lt;div class=&quot;u-clearfix&quot;&gt;\n\t&lt;div class=&quot;u-pullLeft&quot;&gt;&lt;/div&gt;\n&lt;/div&gt;\n\n组件 components，比如按钮，模态框等。\n\n// 样式类组件\n.btn {}\n.btn--default{}\n\n// 功能类组件\n.modal {}\n.modal-header {}\n.modal-body {}\n\n// 状态类组件修饰，需要组合使用，比如.modal.is-big\n.modal {}\n.is-big {}\n\n变量，命名规范是属性-值--组件名，比如\n\n@color-grayLight-highlightMenu: rgb(51, 51, 50)\n\n颜色，规定使用 colors.less，颜色的值优先使用 rgb 或 rgba 格式，后使用 16 进制或 hsl 或英语单词。\n\nz-index 范围，使用z-index.less文件。\n\n@zIndex-1: 100\n@zIndex-2: 200\n@zIndex-3: 200\n...\n@zIndex-9: 900\n\n字体粗细，参考 type.less 类型的大小，字母间距和行高。原尺寸，空格和线的高度应避免出现在 type.less 之外。\n\nN = normal\nI = italic\n4 = normal font-weight\n7 = bold font-weight\n\n@fontSize-micro\n@fontSize-smallest\n@fontSize-smaller\n@fontSize-small\n@fontSize-base\n@fontSize-large\n@fontSize-larger\n@fontSize-largest\n@fontSize-jumbo\n\n行高\n\n@lineHeight-tightest\n@lineHeight-tighter\n@lineHeight-tight\n@lineHeight-baseSans\n@lineHeight-base\n@lineHeight-loose\n@lineHeight-looser\n\n文字间隔\n\n@letterSpacing-tightest\n@letterSpacing-tighter\n@letterSpacing-tight\n@letterSpacing-normal\n@letterSpacing-loose\n@letterSpacing-looser\n\n多个 css 选择器用逗号分隔，并换行。\n\n.content,\n.content-edit {\n  …\n}\n\ncss 块之间只有一个新行，不能有多余空行。\n\n// ok\n.content {\n  …\n}\n.content-edit {\n  …\n}\n\n// bad\n.content {\n  …\n}\n\n.content-edit {\n  …\n}\n\n引号使用双引号\n\nbackground-image: url(&quot;/img/you.jpg&quot;);\nfont-family: &quot;Helvetica Neue Light&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial;\n\n优化选择器性能\n\n// ok\n.user-list &gt; a:hover {\n  color: red;\n}\n\n// ok\n.user-list &gt; .link-primary:hover {\n  color: red;\n}\n\n// bad  太长了\nul.user-list li span a:hover { color: red; }\n\n参考\n\nhttp://lesscss.org/features/#variables-feature\n",
            "date_modified": "2020-03-27T03:26:08.043Z"
        },
        {
            "id": "https://www.banli17.com/es6/let_const.html",
            "url": "https://www.banli17.com/es6/let_const.html",
            "title": "let 和 const",
            "summary": "ES6 系列之 let 和 const\nvar 的问题\n\n变量提升\n循环问题\n\nfor (var i = 0; i &lt; 2; i++) {\n    div[i].onClick = function() {\n        console.log(i);\n    };\n}\nconsole.log(i); // 2\n\n所以 es6 引入了块级作用域。存在于：函数内部、{} 中。\nlet 和 const\n\n不会被提升，在声明前使用会报错\n重复声明报错\n不绑定全局作用域，即不会挂载到 window 上\nconst 不能修改绑定，但允许修改值(对象时)\n\n临时死区\n临时死区(Temporal Dead Zone)，简称 TDZ。\nlet 和 const 声明的变量不会提升到作用域顶部，在声明前访问会报错。\njs 引擎在扫描变量时，会将 var 声明提前，let 和 const 放在 TDZ 中，在访问 TDZ 中变量会发生错误，只有执行过变量声明语句后，变量才会从 TDZ 中移出，才可以访问。\n{\n    console.log(a); // 报错，a 还在 TDZ 中\n    let a = 1; // a 从 TDZ 中移出\n}\n\n循环\nfor (let i = 0; i &lt; 3; i++) {\n    div[i].onClick = function() {\n        console.log(i);\n    };\n}\n\n上面是 重复定义 i? 应该报错？ let 声明在循环内行为在标准中专门定义的。\nlet 会创建一个隐藏的作用域。每次迭代会创建一个新变量，并将之前同名变量的值赋值给新变量进行初始化。\n如果用 const 会报错，因为在循环中 const a = 0; 之后尝试赋新值初始化。\nfor in 循环也是一样的，用 let 会创建新的绑定。\nfor (let i in o) {\n    div[i].onClick = function() {\n        console.log(i);\n    };\n}\n\nBabel 编译 let 和 const\n// example 1\nlet value = 1;\n// 编译后\nvar value = 1;\n\n// example 2\nif (false) {\n    let value = 1;\n}\n// 编译后\nif (false) {\n    var _value = 1;\n}\n\n// example 3\nlet value = 1;\n{\n    let value = 2;\n}\nvalue = 3;\n// 编译后\nvar value = 1;\n{\n    var _value = 2;\n}\nvalue = 3;\n\n// example 4\nvar funcs = [];\nfor (let i = 0; i &lt; 10; i++) {\n    funcs[i] = function() {\n        console.log(i);\n    };\n}\n// 编译后\nvar funcs = [];\n\nvar loop = function loop(i) {\n    funcs[i] = function() {\n        console.log(i);\n    };\n};\n\nfor (var i = 0; i &lt; 10; i++) {\n    _loop(i);\n}\n\n// example 5\nfor (let i = 0; i &lt; 3; i++) {\n    let i = \"abc\";\n    console.log(i); // 输出 3 次 abc，上面两个 i是不同的\n}\n// 编译后，因为没有必要为 i 新建作用域\nfor (var i = 0; i &lt; 3; i++) {\n    var _i = \"abc\";\n    console.log(_i); // 输出 3 次 abc，上面两个 i是不同的\n}\n\n总结\n\nvar 的问题： 挂载全局，提升，多次声明覆盖，循环问题\n什么是临时死区? let const 声明的变量会进入临时死区，代码执行后才可访问。\nlet 循环的过程中如何执行？声明新变量，赋予旧值。所以 const 会报错，因为要赋值。\nbabel 如何编译 let const？\n\nbabel 在线编译工具\n",
            "date_modified": "2020-03-27T03:26:08.046Z"
        },
        {
            "id": "https://www.banli17.com/css/css-secret.html",
            "url": "https://www.banli17.com/css/css-secret.html",
            "title": "css 揭秘",
            "summary": "css 揭秘\n1. 透明边框\n背景实际会从边框处开始渲染，所以如果 border rgba 会有问题。\n解决方法是 background-clip:padding-box\n2. 多边框\n方案 1: box-shadow: 右 下 模糊 扩展 色。\n注意： 阴影不影响盒子渲染，阴影无法触发盒子鼠标事件。可以通过 inset 解决。\n方案 2: outline 适合 2 层边框，+border，而且支持 dashed。\n而且可以通过 outline-offset 调整位置，支持负数。\n3. 灵活的背景定位\n图片要定位到有下角。\nbackground-position: right 20px bottom 20px;\n还一种方法是 calc，计算到左上角的距离。\ncalc(100% - 20px) 注意空格\nbackground-position 默认是从 padding-box 定位的，可以通过 background-origin 修改。\n4. 边框内圆角\noutline 不会跟着 border-radius 走，box-shadow 会。\n所以用 box-shadow 来填满空隙。所以如果边框小于空隙处半径，则无法实现\n5. 条纹背景",
            "date_modified": "2020-03-27T03:26:08.047Z"
        },
        {
            "id": "https://www.banli17.com/es6/",
            "url": "https://www.banli17.com/es6/",
            "title": "简介",
            "summary": "简介\njQuery 2.0.3 源码分析\n参考资料\n\njQuery 2.0.3 源码分析系列\n",
            "date_modified": "2020-03-27T03:26:08.047Z"
        }
    ]
}